directive @extends on INTERFACE | OBJECT

directive @external(reason: String) on FIELD_DEFINITION | OBJECT

directive @key(fields: _FieldSet!, resolvable: Boolean = true) on INTERFACE | OBJECT

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @tag(name: String!) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type ActionItems implements Content {
  animation: JSON
  description: RichText
  id: String
  internalTitle: String
  item: String
  rowDescriptions: [BlockText]
  sidekickLookup: JSON
  subActionItems: [ActionItems]
  theme: [Theme]
  variant: String
}

type AlgoliaHits implements Content {
  animation: JSON
  colorScheme: String
  hitsPerPage: Int
  id: String
  index: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type AlgoliaModule implements Content {
  animation: JSON
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type AlgoliaRefinementList implements Content {
  animation: JSON
  attribute: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Article implements Content {
  animation: JSON
  body: RichText
  breadcrumbs: [Link]
  businessSize: String
  contents: [Content]
  customBreadcrumb: String
  disableBackToTop: Boolean
  footer: GlobalFooter
  header: Header
  heading: Heading
  hero: Hero
  id: String
  links: CollectionLink
  listImage: Media
  lr__path__: String
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  tags: [String]
  theme: [Theme]
  title: String
}

type Asset {
  description: String
  extension: String
  fileName: String
  height: String
  id: String
  svgContent: String
  title: String
  url: String
  width: String
}

type Badge {
  id: String
  variant: String
}

type Block implements Content {
  actions: [Link]
  animation: JSON
  backgroundColor: String
  body: RichText
  categories: [Category]
  colorScheme: String
  date: Date
  eyebrow: String
  eyebrowCompound: RatingChip
  id: String
  internalTitle: String
  introText: Text
  link: Link
  media: [Media]
  mediaMobile: Media
  partnerIcon: Media
  ratingWidgetIcon: Media
  ratingsWidgetNumericalValue: Float
  showArrow: Boolean
  showRatingStars: Boolean
  sidekickLookup: JSON
  subtitle: String
  tabTitle: String
  theme: [Theme]
  title: String
  titleTag: String
  variant: String
}

type BlockActions implements Content {
  actionCards: [CardAction]
  animation: JSON
  bodyText: String
  eyebrow: String
  id: String
  media: [Media]
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type BlockChat implements Content {
  animation: JSON
  bodyText: String
  eyebrow: String
  formId: String
  id: String
  sidekickLookup: JSON
  testField: String
  theme: [Theme]
  title: String
  variant: String
}

type BlockEmbed implements Content {
  animation: JSON
  embedScript: String
  id: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type BlockGlossary implements Content {
  animation: JSON
  description: String
  id: String
  internalTitle: String
  media: [Media]
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type BlockHero implements Content {
  animation: JSON
  bodyContent: String
  colorScheme: String
  eyebrow: String
  id: String
  image: Media
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  titleTag: String
  variant: String
}

type BlockSubNavigation implements Content {
  animation: JSON
  href: String!
  id: String
  internalTitle: String
  logo: Media
  manualUrl: String
  navigationLinks: [LinkSubNavigation]
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type BlockText implements Content {
  action: Link
  animation: JSON
  author: String
  body: RichText
  eyebrow: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type BlockVideo implements Content {
  animation: JSON
  description: String
  id: String
  internalTitle: String
  media: [Media]
  mediaVideo: MediaVideo
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
  videoId: String
}

type Blog implements Content {
  animation: JSON
  author: PageAuthor
  blogCategories: [Category]
  blogCommonResources: BlogCommonResources
  blogTopics: [CategoryTopic]
  body: RichText
  breadcrumbs: [Link]
  businessSize: String
  contents: [Content]
  customBreadcrumb: String
  disableBackToTop: Boolean
  featuredMedia: Media
  footer: Content
  header: Header
  id: String
  listImage: Media
  lr__path__: String
  pubDate: Date
  relatedItems: [Card]
  relatedResources: [Card]
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  stickyFooter: StickyFooter
  summary: String
  tags: [String]
  theme: [Theme]
  title: String
}

type BlogCommonResources {
  byLabel: SiteCommonResource
  newsletterBlock: SiteCommonResource
  newsletterForm: SiteCommonResource
  newsletterSubtitle: SiteCommonResource
  newsletterTitle: SiteCommonResource
  resourcesLabel: SiteCommonResource
  shareLabel: SiteCommonResource
}

type BlogStep implements Content {
  actionItems: [ActionItems]
  animation: JSON
  description: RichText
  id: String
  sidekickLookup: JSON
  stepColor: String
  stepNumber: String
  tagTitle: String
  theme: [Theme]
  title: String
  topTitle: String
  variant: String
}

type Card implements Content {
  actions: [Link]
  animation: JSON
  applyGrayFilter: Boolean
  authorMedia: Media
  body: RichText
  businessSize: String
  cardAuthor: String
  categories: [Category]
  company: String
  contentType: String
  eyebrow: String
  filters: CardFilters
  id: String
  internalTitle: String
  link: Link
  media: [Media]
  resourceAuthor: String
  role: String
  sidekickLookup: JSON
  subtitle: String
  tabTitle: String
  theme: [Theme]
  title: String
  valueStatement: String
  variant: String
}

type CardAction implements Content {
  actionText: String
  animation: JSON
  icon: Media
  id: String
  link: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type CardFilters {
  contentTypes: [String]
  industry: [String]
  topics: [String]
  types: [String]
}

type Category implements Content {
  animation: JSON
  colorScheme: String
  contents: [Content]
  footer: GlobalFooter
  header: Header
  id: String
  internalTitle: String
  link: Link
  lr__path__: String
  media: [Media]
  selected: Boolean
  seo: JSON
  sidekickLookup: JSON
  size: String
  slug: String
  theme: [Theme]
  title: String
  variant: String
}

type CategoryBlog {
  contents: [Content]
  footer: Content
  header: Header
  hero: Hero
}

type CategoryFramework implements Content {
  animation: JSON
  id: String
  internalTitle: String
  lr__path__: String
  media: [Media]
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type CategoryGlossary implements Content {
  animation: JSON
  id: String
  internalTitle: String
  lr__path__: String
  media: [Media]
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type CategoryIndustry implements Content {
  animation: JSON
  id: String
  internalTitle: String
  lr__path__: String
  media: [Media]
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type CategoryIntegration implements Content {
  animation: JSON
  id: String
  internalTitle: String
  lr__path__: String
  media: [Media]
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type CategoryTopic implements Content {
  animation: JSON
  id: String
  internalTitle: String
  lr__path__: String
  media: [Media]
  seo: JSON
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  title: String
}

type Chip {
  id: String
  label: String
  variant: ChipVariants
}

enum ChipVariants {
  careers
  content
}

type Collection implements Content {
  actions: [Link]
  animation: JSON
  backgroundColor: String
  collectionCommonResources: CollectionCommonResources
  colorScheme: String
  contentType: String
  disableGutters: Boolean
  filterOptions: CollectionOptions
  gutterWidth: String
  headlineTextSize: String
  id: String
  images: [Media]
  internalTitle: String
  introText: Text
  isFilterByCategoryTopic: Boolean
  items: [CollectionItem]
  itemsConnection(filter: CollectionFilterInput, limit: Int, offset: Int): CollectionItemConnection
  itemsSpacing: Int
  itemsVariant: String
  itemsWidth: String
  quickFilters: [Option]
  ratingChip: RatingChip
  settings: JSON
  showBusinessSizeFilter: Boolean
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

type CollectionCardsV3 implements Content {
  animation: JSON
  dateTime: Date
  id: String
  internalTitle: String
  items: [CollectionItemCard]
  itemsVariant: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type CollectionCarousel implements Content {
  animation: JSON
  colorScheme: String
  gutterWidth: String
  id: String
  internalTitle: String
  introText: Text
  items: [CollectionCarouselItem]
  itemsVariant: String
  itemsWidth: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

union CollectionCarouselItem = BlockVideo | Card | Link | Media | NavigationItem | Section

type CollectionCommonResources {
  integrationsFilterTitle: SiteCommonResource
  resourcesFilterCategoriesPlaceholder: SiteCommonResource
  resourcesFilterCategory: SiteCommonResource
  resourcesFilterContentType: SiteCommonResource
  resourcesFilterContentTypeBlog: SiteCommonResource
  resourcesFilterContentTypeCustomerStory: SiteCommonResource
  resourcesFilterContentTypeNews: SiteCommonResource
  resourcesFilterContentTypeWebinar: SiteCommonResource
  resourcesFilterHeading: SiteCommonResource
  resourcesFilterIndustry: SiteCommonResource
  resourcesFilterIndustryPlaceholder: SiteCommonResource
  resourcesFilterNoResult: SiteCommonResource
  resourcesFilterTopic: SiteCommonResource
  resourcesFilterTopicsPlaceholder: SiteCommonResource
  resourcesFilterTypesPlaceholder: SiteCommonResource
}

input CollectionFilterInput {
  body: String
  tags: [String]
  topics: [String]
}

type CollectionIntegration implements Content {
  action: BlockText
  animation: JSON
  colorScheme: String
  filters: [CategoryIntegration]
  id: String
  internalTitle: String
  items: [Integration]
  itemsSpacing: Int
  itemsVariant: String
  itemsWidth: String
  settings: JSON
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

union CollectionIntroTextItem = BlockText | Text

union CollectionItem = Card | Link | Media | NavigationItem | Section

type CollectionItemCard implements Content {
  animation: JSON
  companyLogo: Media
  description: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  speakerName: String
  speakerPhoto: Media
  speakerPosition: String
  theme: [Theme]
  variant: String
}

type CollectionItemConnection {
  items: [CollectionItem]
  pageInfo: ConnectionPageInfo
}

type CollectionLink implements Content {
  animation: JSON
  backgroundColor: String
  id: String
  internalTitle: String
  links: [CollectionLinkItem]
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  titleLink: Link
  variant: String
}

union CollectionLinkItem = Link | Media

type CollectionMainFeature implements Content {
  animation: JSON
  colorScheme: String
  contentType: String
  featuredItem: Card
  firstColumnHeading: String
  gutterWidth: String
  id: String
  images: [Media]
  internalTitle: String
  items: [Card]
  itemsSpacing: Int
  itemsVariant: String
  itemsWidth: String
  secondColumnHeading: String
  settings: JSON
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

type CollectionOptions {
  contentTypes: [Option]
  filters: [Option]
  frameworks: [Option]
  industry: [Option]
  tags: [Option]
  topics: [Option]
  types: [Option]
}

type ComparisonTable implements Content {
  animation: JSON
  id: String
  internalTitle: String
  rows: [ActionItems]
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type ConnectionPageInfo {
  allOptions: CollectionOptions
  options: CollectionOptions
  total: Int
}

interface Content {
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
}

type ContentAccordion implements Content {
  animation: JSON
  content: Collection
  heading: BlockText
  id: String
  image: Media
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type ContentfulAppSettings implements Content {
  animation: JSON
  id: String
  internalTitle: String
  settings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

input ContentsFilter {
  contentTypes: [String]
  displayType: String
  ids: [String]
  locale: String
  preview: Boolean
}

type CustomerStory implements Content {
  about: String
  animation: JSON
  author: String
  body: RichText
  breadcrumbs: [Link]
  businessSize: String
  cardVideo: BlockVideo
  categoryFrameworks: [CategoryFramework]
  categoryIndustry: [CategoryIndustry]
  collectionLinks: CollectionLink
  company: String
  contents: [Content]
  customBreadcrumb: String
  customerStoryCommonResources: CustomerStoryCommonResources
  disableBackToTop: Boolean
  featuredMedia: Media
  footer: GlobalFooter
  header: Header
  headingBackgroundColor: String
  id: String
  industry: String
  internalTitle: String
  listImage: Media
  location: String
  lr__path__: String
  pubDate: Date
  relatedItems: [Card]
  role: String
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  socialLinks: [Link]
  stickyFooter: StickyFooter
  summary: String
  theme: [Theme]
  title: String
  valueStatement: String
  variant: String
  website: String
}

type CustomerStoryCommonResources {
  aboutLabel: SiteCommonResource
  industryLabel: SiteCommonResource
  locationLabel: SiteCommonResource
  resourcesLabel: SiteCommonResource
  shareLabel: SiteCommonResource
  socialsLabel: SiteCommonResource
  websiteLabel: SiteCommonResource
}

"""Date custom scalar type"""
scalar Date

type Document implements Content {
  animation: JSON
  document: Media
  id: String
  internalTitle: String
  lr__path__: String
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
}

type Form implements Content {
  animation: JSON
  formId: String
  formMessage: String
  id: String
  internalTitle: String
  introText: RichText
  portalId: String
  sidekickLookup: JSON
  successMessage: RichText
  theme: [Theme]
  variant: String
}

type FormField {
  error: Boolean
  helperText: String
  id: String
  multiline: Boolean
  options: [FormOption!]
  placeholder: String
  search: Boolean
  select: Boolean
  success: Boolean
}

type FormGroup {
  actions: [Link!]
  fields: [FormField!]
  id: String
}

type FormOption {
  id: String
  label: String
  value: String
}

type Global implements Content {
  animation: JSON
  badges: [Badge!]
  buttons: [Link!]
  chips: [Chip!]
  formFields: [FormField!]
  formGroups: [FormGroup!]
  icons: [Icon!]
  id: String
  logos: [Logo!]
  shadows: [Shadow!]
  sidekickLookup: JSON
  tags: [Category!]
  theme: [Theme]
  typographies: [Typography!]
}

type GlobalFooter implements Content {
  animation: JSON
  copyrightDisclaimer: RichText
  disclaimer: RichText
  id: String
  internalTitle: String
  introContents: [Content]
  legalLinks: [Link]
  localeLinks: [Link]
  logo: Media
  logoLink: Link
  navigationItems: [NavigationItem]
  sidekickLookup: JSON
  socialLinks: [Link]
  theme: [Theme]
  variant: String
}

type Header implements Content {
  animation: JSON
  color: String
  colorScheme: String
  ctAs: [Link]
  id: String
  internalTitle: String
  logo: Media
  logoUrl: Link
  mobileCtAs: [Link]
  navigationItems: [NavigationItem]
  sidekickLookup: JSON
  supernavIcon: Media
  supernavLink: Link
  supernavMobileText: String
  supernavText: String
  theme: [Theme]
  variant: String
}

type Heading implements Content {
  animation: JSON
  breadcrumbs: [Link]
  description: String
  headingTitle: String
  id: String
  internalTitle: String
  isSearchable: Boolean
  showBreadcrumbs: Boolean
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Hero implements Content {
  action: Link
  actions: [Link]
  animation: JSON
  background: Media
  backgroundAsset: Media
  backgroundColor: String
  body: RichText
  chipText: String
  colorScheme: String
  contentHeight: String
  contentWidth: String
  eyebrow: String
  id: String
  image: [Media]
  internalTitle: String
  overline: String
  sidekickLookup: JSON
  subtitle: String
  theme: [Theme]
  title: String
  titleTag: String
  variant: String
}

type HeroHomepage implements Content {
  actions: [Link]
  animation: JSON
  background: Media
  ctaIcon: Media
  ctaText: String
  ctaTextMobile: String
  ctaUrl: String
  featuredContent: Tabs
  id: String
  internalTitle: String
  sidekickLookup: JSON
  subtitle: String
  tags: [String]
  tagsLinkedItems: [Link]
  theme: [Theme]
  title: String
  variant: String
}

union HeroTypes = Hero | HeroHomepage

type Icon {
  id: String
  variant: String
}

type IconText implements Content {
  animation: JSON
  bodyIconText: RichText
  iconText: Media
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  titleIconText: String
  variant: String
}

type Integration implements Content {
  animation: JSON
  categories: [Category]
  description: String
  id: String
  internalTitle: String
  link: Link
  media: [Media]
  sidekickLookup: JSON
  tag: String
  theme: [Theme]
  title: String
  variant: String
}

union IntroTextItem = Heading | Text

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Link implements Content {
  actionType: String
  animation: JSON
  color: String
  colorScheme: String
  href: String!
  icon: String
  iconPosition: String
  id: String
  internalTitle: String
  manualUrl: String
  sidekickLookup: JSON
  target: String
  text: String
  theme: [Theme]
  variant: String
}

type LinkAnchor implements Content {
  anchorId: String
  animation: JSON
  href: String!
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type LinkSubNavigation implements Content {
  animation: JSON
  href: String!
  id: String
  linkText: String
  manualUrl: String
  sidekickLookup: JSON
  subLinks: [LinkSubNavigationLink]
  theme: [Theme]
  variant: String
}

type LinkSubNavigationLink implements Content {
  animation: JSON
  href: String!
  id: String
  linkText: String
  manualUrl: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Locales {
  available: [String!]!
  default: String!
}

type Location {
  lat: String
  lon: String
}

type Logo {
  id: String
  variant: String
}

type Media implements Content {
  animation: JSON
  asset: Media
  assetURL: String
  autoPlay: Boolean
  description: String
  file: Asset
  fileMobile: Asset
  fileTablet: Asset
  id: String
  internalTitle: String
  link: Link
  mobile: Media
  placeholder: Media
  sidekickLookup: JSON
  source: String
  tablet: Media
  theme: [Theme]
  title: String
  variant: String
}

type MediaVideo implements Content {
  animation: JSON
  assetURL: String
  autoPlay: Boolean
  id: String
  internalTitle: String
  placeholder: Media
  playIcon: Media
  sidekickLookup: JSON
  startMuted: Boolean
  theme: [Theme]
  title: String
  variant: String
}

type Modal implements Content {
  animation: JSON
  backDropImage: Media
  content: ModalContentType
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

union ModalContentType = Block | Form

type ModuleIntegration implements Content {
  animation: JSON
  id: String
  internalTitle: String
  settings: JSON
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

union NavMediaItem = Media | MediaVideo

type NavigationItem implements Content {
  actions: [Link]
  animation: JSON
  href: String!
  id: String
  image: Media
  internalTitle: String
  manualUrl: String
  media: Media
  navMedia: [NavMediaItem]
  sidekickLookup: JSON
  subNavigation: [SubnavigationItem]
  summary: String
  tag: String
  text: String
  theme: [Theme]
  title: String
  variant: String
}

type News implements Content {
  animation: JSON
  body: RichText
  disableBackToTop: Boolean
  featuredMedia: Media
  id: String
  listImage: Media
  lr__path__: String
  manualUrl: String
  pubDate: Date
  seo: JSON
  sidekickLookup: JSON
  slug: String
  summary: String
  tags: [String]
  theme: [Theme]
  title: String
}

type NewsletterCta implements Content {
  animation: JSON
  form: Form
  id: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type Option {
  label: String
  value: String
}

type Page implements Content {
  animation: JSON
  antiFlickerTimeout: Int
  breadcrumbs: [Link]
  colorScheme: String
  contents: [Content]
  customBreadcrumb: String
  disableBackToTop: Boolean
  featuredImage: Media
  footer: Content
  header: Header
  headingContent: [Content]
  headingContentColor: String
  hero: Hero
  id: String
  internalTitle: String
  listImage: Media
  lr__path__: String
  pageHero: HeroTypes
  pageListImage: Media
  parentPage: Page
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  stickyFooter: StickyFooter
  summary: String
  theme: [Theme]
  title: String
  variant: String
}

type PageAuthor implements Content {
  animation: JSON
  bio: String
  email: String
  featuredMedia: Media
  id: String
  image: Media
  jobTitle: String
  listImage: Media
  lr__path__: String
  name: String
  sidekickLookup: JSON
  slug: String
  socialLinks: [Link]
  theme: [Theme]
}

type PageCaseStudy implements Content {
  animation: JSON
  body: RichText
  disableBackToTop: Boolean
  featuredMedia: Media
  id: String
  listImage: Media
  lr__path__: String
  pubDate: Date
  seo: JSON
  sidekickLookup: JSON
  slug: String
  summary: String
  tags: [String]
  theme: [Theme]
  title: String
}

type PageHub implements Content {
  animation: JSON
  breadcrumbs: [Link]
  contents: [Content]
  contentsGray: [Content]
  customBreadcrumb: String
  disableBackToTop: Boolean
  footer: GlobalFooter
  header: Header
  heading: Heading
  hero: Hero
  id: String
  links: CollectionLink
  listImage: Media
  lr__path__: String
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  subnavigation: CollectionLink
  tags: [String]
  theme: [Theme]
  title: String
}

type PagePathParam {
  slug: [String!]
}

type PagePathParams {
  locale: String
  params: PagePathParam!
}

type PageWebinar implements Content {
  animation: JSON
  body: RichText
  breadcrumbs: [Link]
  businessSize: String
  contents: [Content]
  disableBackToTop: Boolean
  featuredMedia: Media
  footer: GlobalFooter
  header: Header
  hero: Hero
  id: String
  listImage: Media
  lr__path__: String
  parentPage: Page
  pubDate: Date
  seo: JSON
  showFooter: Boolean
  sidekickLookup: JSON
  slug: String
  stickyFooter: StickyFooter
  summary: String
  tags: [String]
  theme: [Theme]
  title: String
}

type PartnersTable implements Content {
  animation: JSON
  id: String
  sheetId: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type Person implements Content {
  animation: JSON
  bio: String
  contents: [Content]
  email: String
  footer: GlobalFooter
  header: Header
  id: String
  image: Media
  jobTitle: String
  linkedInUrl: String
  lr__path__: String
  mainImage: Media
  name: String
  rolloverImage: Media
  sidekickLookup: JSON
  slug: String
  theme: [Theme]
  twitterUrl: String
}

type QAContentTypeParam {
  contentType: String!
}

type QAContentTypePathParam {
  params: QAContentTypeParam
}

type QAMocksParam {
  contentType: String!
  mock: String!
}

type QAMocksPathParam {
  params: QAMocksParam
}

type Query {
  _service: _Service!
  availableLocales: Locales
  availableQAContentTypes: [QAContentTypePathParam]
  availableQAMocks(contentType: String!): [QAMocksPathParam]
  content(displayType: String, id: String!, locale: String, preview: Boolean): Content
  contentPreview(displayType: String, id: String!, locale: String, overrideContent: JSON): Content
  contents(filter: ContentsFilter!): [Content]
  page(locale: String, path: String!, preview: Boolean, site: String): Content
  paths(locales: [String!], preview: Boolean, site: String): [PagePathParams!]
  pathsForId(id: String!, preview: Boolean): [String!]
  qa(contentType: String!, mock: Int, preview: Boolean): [Content]
  redirects(preview: Boolean!): [Redirect]
  rewrites(preview: Boolean!): [Rewrite]
  seo(locale: String, path: String!, preview: Boolean): JSON
  sitemap(locales: [String!], preview: Boolean, root: String!, site: String): Sitemap
  sitemapIndex(preview: Boolean, site: String): Sitemap
  sitemapPage(contentType: String!, locale: String, page: Int, preview: Boolean, site: String): SitemapPage
}

type Quote implements Content {
  animation: JSON
  authorName: String
  authorTitle: String
  id: String
  image: Media
  internalTitle: String
  introText: Text
  link: Link
  logo: Media
  quote: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type RatingChip implements Content {
  animation: JSON
  id: String
  internalTitle: String
  media: Media
  rating: Float
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type Redirect implements Content {
  animation: JSON
  destination: String
  id: String
  permanent: Boolean
  sidekickLookup: JSON
  source: String
  sourceUrl: String
  targetUrl: String
  theme: [Theme]
  variant: String
}

type Rewrite {
  destination: String
  source: String
}

type RichText {
  id: String
  json: JSON
  links: RichTextLinks
}

type RichTextLinks {
  assets: [Media]
  entries: [Content]
}

type SearchEngine implements Content {
  animation: JSON
  id: String
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

type Section implements Content {
  anchorName: String
  animation: JSON
  background: Media
  backgroundColor: String
  childItemCount: Int
  contentAlignment: String
  contentDirection: String
  contentDirectionOverride: String
  contentSpacing: Int
  contentSpacingOverride: Int
  contentWidth: String
  contents: [Content]
  gutterWidth: String
  id: String
  internalTitle: String
  introText: IntroTextItem
  paddingBottom: Int
  paddingLeft: Int
  paddingRight: Int
  paddingTop: Int
  settings: JSON
  sidekickLookup: JSON
  styles: JSON
  theme: [Theme]
  variant: String
}

type Shadow {
  elevation: Int
  id: String
  label: String
}

type Site implements Content {
  animation: JSON
  favicon: Media
  id: String
  internalTitle: String
  seo: JSON
  sidekickLookup: JSON
  siteKey: String
  theme: [Theme]
  variant: String
}

type SiteCommonResource implements Content {
  animation: JSON
  id: String
  internalTitle: String
  key: String
  reference: Content
  shortText: String
  sidekickLookup: JSON
  theme: [Theme]
  variant: String
}

type Sitemap {
  pages: [SitemapPage]
}

type SitemapEntry {
  lastmod: String
  loc: String
}

type SitemapPage {
  contentType: String
  entries: [SitemapEntry]
  filename: String
  lastmod: String
  loc: String
  locale: String
  page: Int
}

type StickyFooter implements Content {
  animation: JSON
  id: String
  link: Link
  reviews: Int
  showCloseButton: Boolean
  showReviews: Boolean
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

union SubnavigationItem = Link | NavigationItem

type Tab implements Content {
  animation: JSON
  card: TabItem
  id: String
  internalTitle: String
  media: [Media]
  sidekickLookup: JSON
  theme: [Theme]
  title: String
  variant: String
}

union TabItem = Card | Quote

type Tabs implements Content {
  actions: [Link]
  animation: JSON
  gutterWidth: String
  id: String
  internalTitle: String
  introText: Text
  sidekickLookup: JSON
  tabs: [Tab]
  theme: [Theme]
  variant: String
}

type Template implements Content {
  animation: JSON
  category: String
  id: String
  image: Media
  sidekickLookup: JSON
  templateName: String
  theme: [Theme]
  variant: String
}

type Text implements Content {
  align: String
  animation: JSON
  body: RichText
  color: String
  colorScheme: String
  eyebrow: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  styles: JSON
  subtitle: String
  theme: [Theme]
  title: String
  variant: String
}

type Theme implements Content {
  animation: JSON
  components: JSON
  description: String
  id: String
  internalTitle: String
  sidekickLookup: JSON
  theme: [Theme]
  typography: JSON
  variant: String
}

type Typography {
  id: String
  label: String
  variant: String
}

scalar _Any

scalar _FieldSet

type _Service {
  sdl: String
}