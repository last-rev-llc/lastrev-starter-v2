// generated by contentful-to-sanity
import * as React from 'react'
import {
  defineField,
  defineType,
  useFormValue,
  type SchemaTypeDefinition,
  set,
  PatchEvent,
} from 'sanity'

const validateIn = (values: (string | number)[], value: any) =>
  values.includes(value) ? true : `Value must be one of ${values.join(', ')}`

// Helper function to gather comprehensive page content for AI generation
const gatherPageContent = (formValues: any) => {
  const content = formValues.content || []
  const references = formValues.references || []

  // Extract text content from structured content blocks
  const extractTextFromContent = (blocks: any[]): string => {
    if (!Array.isArray(blocks)) return ''

    return blocks
      .map((block: any) => {
        if (typeof block === 'string') return block
        if (block?._type === 'block' && block?.children) {
          return block.children.map((child: any) => child.text || '').join(' ')
        }
        if (block?.text) return block.text
        if (block?.title) return block.title
        if (block?.heading) return block.heading
        return ''
      })
      .filter(Boolean)
      .join(' ')
  }

  // Extract reference information
  const extractReferences = (refs: any[]): string => {
    if (!Array.isArray(refs)) return ''

    return refs
      .map((ref: any) => {
        const title = ref?.internalTitle || ref?.title || ''
        const summary = ref?.promoSummary || ref?.excerpt || ''
        return `${title} ${summary}`.trim()
      })
      .filter(Boolean)
      .join(' ')
  }

  return {
    title: formValues.internalTitle || formValues.title || formValues.name || '',
    slug: formValues.slug?.current || '',
    excerpt: formValues.excerpt || '',
    content: extractTextFromContent(content),
    references: extractReferences(references),
  }
}

// AI Content Generation Service
const generateContentWithAI = async (
  fieldName: string,
  fieldType: string,
  fieldTitle: string,
  pageContent: any,
  currentValue?: string,
) => {
  const prompt = createFieldPrompt(fieldName, fieldType, fieldTitle, pageContent, currentValue)

  const response = await fetch(
    'https://lr-production.studio.theanswer.ai/api/v1/prediction/718c0507-d5e5-4a62-ba14-989c681c1b8e',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({question: prompt}),
    },
  )

  if (!response.ok) {
    throw new Error('Failed to generate content')
  }

  const result = await response.json()
  const aiResponse = result.text || result.answer || result.response || ''

  return aiResponse.replace(/^["']|["']$/g, '').trim()
}

// Smart prompt generator based on field context
const createFieldPrompt = (
  fieldName: string,
  fieldType: string,
  fieldTitle: string,
  pageContent: any,
  currentValue?: string,
) => {
  const baseContext = `Generate content for a web page field with the following context:

Page Title: ${pageContent.title}
Page Slug: ${pageContent.slug}
Page Excerpt: ${pageContent.excerpt}
Page Content: ${pageContent.content.substring(0, 1500)}...
Referenced Content: ${pageContent.references.substring(0, 400)}...

Field to generate content for:
- Field Name: ${fieldName}
- Field Type: ${fieldType}
- Field Title: ${fieldTitle}
${currentValue ? `- Current Value: ${currentValue}` : ''}

`

  // Field-specific prompts based on name and type
  if (fieldName.includes('title') || fieldName.includes('Title')) {
    return (
      baseContext +
      `Generate a compelling, SEO-optimized title that:
- Is concise and descriptive (max 60 characters)
- Captures the essence of the content
- Is engaging for the target audience
- Avoids generic phrases

Return only the title text, no additional formatting.`
    )
  }

  if (fieldName.includes('description') || fieldName.includes('Description')) {
    return (
      baseContext +
      `Generate a compelling description that:
- Is 2-3 sentences long (max 160 characters for meta descriptions)
- Summarizes the key value proposition
- Is engaging and informative
- Encourages further reading

Return only the description text, no additional formatting.`
    )
  }

  if (fieldName.includes('summary') || fieldName.includes('Summary')) {
    return (
      baseContext +
      `Generate a promotional summary that:
- Is 2-3 sentences long (max 200 characters)
- Is engaging and compelling for marketing use
- Captures the key value proposition
- Would work well in cards, listings, and promotional materials
- Is optimized for driving clicks and engagement

Return only the summary text, no additional formatting.`
    )
  }

  if (fieldName.includes('excerpt') || fieldName.includes('Excerpt')) {
    return (
      baseContext +
      `Generate an excerpt that:
- Is a brief, engaging preview of the content
- Is 1-2 sentences long
- Entices readers to learn more
- Captures the main topic or benefit

Return only the excerpt text, no additional formatting.`
    )
  }

  if (fieldName.includes('overline') || fieldName.includes('Overline')) {
    return (
      baseContext +
      `Generate a short overline that:
- Is very brief (max 30 characters)
- Provides context or category information
- Examples: "Featured", "Latest News", "Case Study", "Guide"
- Is relevant to the content type

Return only the overline text, no additional formatting.`
    )
  }

  // Open Graph specific fields
  if (fieldName === 'ogTitle') {
    return (
      baseContext +
      `Generate an Open Graph title optimized for Facebook sharing that:
- Is compelling and click-worthy (max 60 characters)
- Works well when shared on social media
- May be slightly more engaging/casual than the SEO title
- Captures attention in a social feed context
- Encourages social sharing

Return only the title text, no additional formatting.`
    )
  }

  if (fieldName === 'ogDescription') {
    return (
      baseContext +
      `Generate an Open Graph description for Facebook that:
- Is engaging and shareable (max 155 characters)
- Encourages clicks from social media
- Highlights the most interesting aspect of the content
- Works well in a social media context
- May be more conversational than SEO description

Return only the description text, no additional formatting.`
    )
  }

  // Twitter specific fields
  if (fieldName === 'twTitle') {
    return (
      baseContext +
      `Generate a Twitter card title that:
- Is concise and punchy (max 70 characters)
- Works well in Twitter's fast-paced environment
- May include relevant hashtags if appropriate
- Captures attention quickly
- Optimized for retweets and engagement

Return only the title text, no additional formatting.`
    )
  }

  if (fieldName === 'twDescription') {
    return (
      baseContext +
      `Generate a Twitter card description that:
- Is brief and engaging (max 200 characters)
- Complements the title effectively
- Encourages clicks and retweets
- Works well in Twitter's format
- May be more conversational or urgent

Return only the description text, no additional formatting.`
    )
  }

  if (fieldType === 'text' || fieldType === 'string') {
    return (
      baseContext +
      `Generate appropriate ${fieldTitle.toLowerCase()} content that:
- Is relevant to the page context
- Matches the purpose of a "${fieldTitle}" field
- Is concise and well-written
- Fits the content style and tone

Return only the content text, no additional formatting.`
    )
  }

  // Generic fallback
  return (
    baseContext +
    `Generate appropriate content for the "${fieldTitle}" field that:
- Is relevant to the page context
- Matches the expected format for this field type
- Is well-written and engaging
- Fits the overall content strategy

Return only the content, no additional formatting.`
  )
}

// Reusable AI field wrapper
// Usage: withAIGeneration(defineField({ name: 'title', type: 'string', title: 'Title' }))
const withAIGeneration = (field: any) => {
  // Only add AI generation to text and string fields
  if (!['string', 'text'].includes(field.type)) {
    return field
  }

  return {
    ...field,
    components: {
      input: (props: any) => {
        const [isGenerating, setIsGenerating] = React.useState(false)
        const [suggestedContent, setSuggestedContent] = React.useState('')
        const [showSuggestion, setShowSuggestion] = React.useState(false)

        // Get form values for context
        const formDocument = useFormValue([])

        const generateContent = async () => {
          if (!formDocument) return

          setIsGenerating(true)
          try {
            const pageContent = gatherPageContent(formDocument)
            const generated = await generateContentWithAI(
              field.name,
              field.type,
              field.title,
              pageContent,
              props.value,
            )

            setSuggestedContent(generated)
            setShowSuggestion(true)
          } catch (error: any) {
            console.error('Error generating content:', error)
            alert(`Failed to generate content: ${error.message}`)
          } finally {
            setIsGenerating(false)
          }
        }

        const acceptSuggestion = () => {
          props.onChange(PatchEvent.from(set(suggestedContent)))
          setShowSuggestion(false)
          setSuggestedContent('')
        }

        const rejectSuggestion = () => {
          setShowSuggestion(false)
          setSuggestedContent('')
        }

        return React.createElement(
          'div',
          {},
          // Original field input
          props.renderDefault(props),
          // AI Generation Button
          React.createElement(
            'div',
            {
              style: {
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginTop: '8px',
              },
            },
            React.createElement(
              'button',
              {
                type: 'button',
                onClick: generateContent,
                disabled: isGenerating,
                style: {
                  padding: '4px 8px',
                  fontSize: '11px',
                  border: '1px solid #7c3aed',
                  borderRadius: '3px',
                  background: isGenerating ? '#d1d5db' : '#7c3aed',
                  color: 'white',
                  cursor: isGenerating ? 'not-allowed' : 'pointer',
                  opacity: isGenerating ? 0.5 : 1,
                },
              },
              isGenerating ? '🤖 Generating...' : '🤖 Generate with AI',
            ),
          ),

          // Suggestion Box
          showSuggestion &&
            React.createElement(
              'div',
              {
                style: {
                  marginBottom: '12px',
                  padding: '12px',
                  border: '1px solid #e5e7eb',
                  borderRadius: '6px',
                  backgroundColor: '#f9fafb',
                },
              },
              React.createElement(
                'div',
                {
                  style: {
                    fontSize: '12px',
                    fontWeight: 'bold',
                    marginBottom: '6px',
                    color: '#374151',
                  },
                },
                'AI Suggestion:',
              ),
              React.createElement(
                'div',
                {
                  style: {
                    marginBottom: '8px',
                    padding: '8px',
                    backgroundColor: 'white',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    fontSize: '13px',
                  },
                },
                suggestedContent,
              ),
              React.createElement(
                'div',
                {
                  style: {display: 'flex', gap: '8px'},
                },
                React.createElement(
                  'button',
                  {
                    type: 'button',
                    onClick: acceptSuggestion,
                    style: {
                      padding: '4px 12px',
                      fontSize: '11px',
                      border: '1px solid #10b981',
                      borderRadius: '3px',
                      background: '#10b981',
                      color: 'white',
                      cursor: 'pointer',
                    },
                  },
                  '✓ Accept',
                ),
                React.createElement(
                  'button',
                  {
                    type: 'button',
                    onClick: rejectSuggestion,
                    style: {
                      padding: '4px 12px',
                      fontSize: '11px',
                      border: '1px solid #ef4444',
                      borderRadius: '3px',
                      background: '#ef4444',
                      color: 'white',
                      cursor: 'pointer',
                    },
                  },
                  '✗ Reject',
                ),
              ),
            ),
        )
      },
    },
  }
}

export const seoType = defineType({
  name: 'seo',
  title: 'SEO',
  type: 'object',

  /* -------- fieldsets -------- */
  fieldsets: [
    {name: 'general', title: 'General', options: {collapsible: true, collapsed: true}},
    {name: 'og', title: 'Open Graph', options: {collapsible: true, collapsed: true}},
    {name: 'twitter', title: 'Twitter', options: {collapsible: true, collapsed: true}},
  ],

  /* -------- fields -------- */
  fields: [
    /* General ---------------------------------------------------- */
    withAIGeneration(
      defineField({
        name: 'title',
        title: 'Title',
        type: 'string',
        fieldset: 'general',
        initialValue: ({parent}) => parent?.internalTitle || '',
      }),
    ),
    withAIGeneration(
      defineField({
        name: 'description',
        title: 'Description',
        type: 'text',
        rows: 3,
        fieldset: 'general',
      }),
    ),
    defineField({
      name: 'keywords',
      title: 'Keywords',
      type: 'array',
      of: [{type: 'string'}],
      options: {layout: 'tags'},
      fieldset: 'general',
    }),
    defineField({
      name: 'canonicalUrl',
      title: 'Canonical URL',
      type: 'url',
      fieldset: 'general',
      validation: (r) => r.uri({scheme: ['https'], allowRelative: false}),
    }),
    defineField({
      name: 'index',
      title: 'Indexed by search engines?',
      type: 'boolean',
      initialValue: true,
      fieldset: 'general',
    }),
    defineField({
      name: 'follow',
      title: 'Follow links from this page?',
      type: 'boolean',
      initialValue: true,
      fieldset: 'general',
    }),

    /* Facebook --------------------------------------------------- */
    withAIGeneration(
      defineField({
        name: 'ogTitle',
        title: 'Post title',
        type: 'string',
        fieldset: 'og',
      }),
    ),
    withAIGeneration(
      defineField({
        name: 'ogDescription',
        title: 'Description',
        type: 'text',
        rows: 3,
        fieldset: 'og',
      }),
    ),
    defineField({
      name: 'ogImage',
      title: 'Post image',
      type: 'image',
      options: {hotspot: true},
      fieldset: 'og',
    }),

    /* Twitter ---------------------------------------------------- */
    withAIGeneration(
      defineField({
        name: 'twTitle',
        title: 'Post title',
        type: 'string',
        fieldset: 'twitter',
      }),
    ),
    withAIGeneration(
      defineField({
        name: 'twDescription',
        title: 'Description',
        type: 'text',
        rows: 3,
        fieldset: 'twitter',
      }),
    ),
    defineField({
      name: 'twImage',
      title: 'Post image',
      type: 'image',
      options: {hotspot: true},
      fieldset: 'twitter',
    }),
  ],

  /* -------- preview (optional) -------- */
  preview: {
    select: {title: 'title', index: 'index'},
    prepare({title, index}) {
      return {
        title: title ?? 'SEO settings',
        subtitle: index === false ? '🚫 No-index' : 'Indexable',
      }
    },
  },
})

export const sectionType = defineType({
  type: 'document',
  name: 'section',
  title: 'Section',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,
      description:
        'Choose the variant that will be applied to the format of the Section and/or applied to the items selected in the Content field.',

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Default', 'One Per Row', 'Two Per Row'], value)),
      options: {list: ['Default', 'One Per Row', 'Two Per Row'], layout: 'dropdown'},
    }),
    defineField({
      name: 'anchorName',
      type: 'string',
      title: 'Anchor name',
      hidden: false,
      description:
        'Optional. Use this field to define the name of an anchor placement for this section.',
    }),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      description:
        '[Optional] Choose a Text item to add a title, subtitle, body, and/or overline to this module.',
      to: [{type: 'contentful_text'}],
    }),
    defineField({
      name: 'contents',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'contentful_block'},
            {type: 'collection'},
            {type: 'media'},
            {type: 'elementForm'},
            {type: 'collectionDynamic'},
            {type: 'collectionExpandable'},
            {type: 'contentful_text'},
            {type: 'elementVideo'},
          ],
        },
      ],
      title: 'Contents',
      hidden: false,
      description: 'Choose the items that will appear in this section.',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'background',
      type: 'reference',
      title: 'Background Media',
      hidden: false,
      description:
        'Optional. Use a Media item to define an image used in the background of the Section.',
      to: [{type: 'media'}],
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      description:
        'Select the background color for this Section from the options defined in your design system or brand color scheme.',
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['primary', 'secondary', 'background.dark'], value)),
      options: {list: ['primary', 'secondary', 'background.dark'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const cardType = defineType({
  type: 'object',
  name: 'card',
  title: 'Collection Item',
  description: '',
  fields: [
    // defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),

    // defineField({
    //   name: 'overline',
    //   type: 'string',
    //   title: 'Overline',
    //   hidden: false,
    //   description: '[Optional] This field will be displayed above the Title.',
    //   validation: (Rule) => Rule.max(256),
    // }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description: 'Title on the card',
    }),

    // defineField({
    //   name: 'subtitle',
    //   type: 'string',
    //   title: 'Subtitle',
    //   hidden: false,
    //   description: '[Optional] This field will be displayed below the Title.',
    // }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      name: 'actions',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Actions',
      hidden: false,
      description:
        'The Actions field is used when only the Link item (linked text or button) of the card is intended to be clickable (not the card itself).',
    }),
    defineField({
      name: 'media',
      type: 'array',
      of: [{type: 'image'}, {type: 'file'}],
      title: 'Media',
      hidden: false,
    }),
    defineField({
      name: 'link',
      type: 'reference',
      title: 'Link',
      hidden: false,
      description:
        'The Link field is used when the entire area of the card is intended to be clickable. Select the Link item to configure the location and attributes of the link.',
      to: [{type: 'link'}],
    }),
    // defineField({
    //   name: 'disclaimer',
    //   type: 'string',
    //   title: 'Disclaimer',
    //   hidden: false,
    //   description: 'This field will be used for only pricing and Author variant',
    // }),
    // defineField({
    //   name: 'userName',
    //   type: 'string',
    //   title: 'User Name',
    //   hidden: false,
    //   description: 'Only for Testimonial variant',
    // }),
    // defineField({
    //   type: 'boolean',
    //   description:
    //     'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
    //   name: 'contentfulArchived',
    //   readOnly: true,
    // }),
  ],
  preview: {
    select: {
      title: 'title',
      subtitle: 'body',
      media: 'media',
      hasActions: 'actions',
      linkTitle: 'link.title',
    },
    prepare(selection) {
      const {title, subtitle, media, hasActions, linkTitle} = selection

      // Extract text from rich text body if available
      const bodyText =
        subtitle && subtitle.length > 0
          ? subtitle
              .filter((block) => block._type === 'block')
              .map((block) =>
                block.children
                  ?.filter((child) => child._type === 'span')
                  ?.map((span) => span.text)
                  ?.join(''),
              )
              .join(' ')
              .slice(0, 100) + (subtitle.length > 100 ? '...' : '')
          : ''

      // Build subtitle with available information
      const subtitleParts = []
      if (bodyText) subtitleParts.push(bodyText)
      if (hasActions && hasActions.length > 0)
        subtitleParts.push(`• ${hasActions.length} action${hasActions.length > 1 ? 's' : ''}`)
      if (linkTitle) subtitleParts.push(`• Links to: ${linkTitle}`)

      return {
        title: title || 'Untitled Card',
        subtitle: subtitleParts.join(' '),
        media: media && media.length > 0 ? media[0] : undefined,
      }
    },
  },
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const linkType = defineType({
  type: 'document',
  name: 'link',
  title: 'Link - CTA',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Variant',
      hidden: false,
      description: 'Choose the format of your linked item.',

      initialValue: 'Link',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Link', 'Button - Text', 'Button - Outlined', 'Button - Contained'], value),
        ),
      options: {
        list: ['Link', 'Button - Text', 'Button - Outlined', 'Button - Contained'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'linkedContent',
      type: 'reference',
      title: 'Linked Content',
      hidden: false,
      description:
        'If the page or the link exists in Contentful, use this field to select the slug or URL of that item.',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'manualUrl',
      type: 'string',
      title: 'Manual URL',
      hidden: false,
      description:
        'If the page or URL does not exist in Contentful, use this field to manually configure an absolute URL. NOTE: if this field is used, the Linked Content field will be ignored.',
    }),
    defineField({
      name: 'text',
      type: 'string',
      title: 'Link Text',
      hidden: false,
      description:
        'This text will appear within the link or button. For links that utilize only an icon (and no link text), this text will be used for accessibility purposes.',
    }),
    defineField({
      name: 'icon',
      type: 'string',
      title: 'Icon',
      hidden: false,
      description: 'For icon-only buttons, leave text field empty',
      validation: (Rule) =>
        Rule.custom((value) =>
          validateIn(
            [
              'instagram',
              'facebook',
              'twitter',
              'youtube',
              'chevron-right',
              'caret-right',
              'logo',
              'linkedin',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'instagram',
          'facebook',
          'twitter',
          'youtube',
          'chevron-right',
          'caret-right',
          'logo',
          'linkedin',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'iconPosition',
      type: 'string',
      title: 'Icon Position',
      hidden: false,
      description:
        'Optional. This applies only to Links with an icon.  Icon positioned on the right side of the text by default',

      initialValue: 'Right',
      validation: (Rule) => Rule.custom((value) => validateIn(['Right', 'Left', 'None'], value)),
      options: {list: ['Right', 'Left', 'None'], layout: 'dropdown'},
    }),
    defineField({
      name: 'color',
      type: 'string',
      title: 'Color',
      hidden: false,
      description: 'Choose the button or link color within your design system.',
      validation: (Rule) =>
        Rule.custom((value) =>
          validateIn(['primary', 'secondary', 'info', 'success', 'error'], value),
        ),
      options: {list: ['primary', 'secondary', 'info', 'success', 'error'], layout: 'dropdown'},
    }),
    defineField({
      name: 'target',
      type: 'string',
      title: 'Target',
      hidden: false,

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Default', 'New Window', 'Same Window', 'Parent Window'], value),
        ),
      options: {
        list: ['Default', 'New Window', 'Same Window', 'Parent Window'],
        layout: 'dropdown',
      },
    }),
    defineField({name: 'altText', type: 'text', title: 'Alt Text', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const collectionType = defineType({
  type: 'document',
  name: 'collection',
  title: 'Collection',
  description: 'A collection of content items that can be displayed in various layouts',
  groups: [
    {
      name: 'content',
      title: 'Content',
    },
    {
      name: 'styling',
      title: 'Styling',
    },
    {
      name: 'carousel',
      title: 'Carousel Settings',
    },
  ],
  fieldsets: [
    {
      name: 'styling',
      title: 'Styling & Background',
      options: {collapsible: true, collapsed: true},
    },
    // {
    //   name: 'carousel',
    //   title: 'Carousel Settings',
    //   // hidden: ({document}) => {
    //   //   const breakpoints = document?.carouselBreakpoints
    //   //   return !Array.isArray(breakpoints) || breakpoints.length === 0
    //   // },
    //   options: {collapsible: true, collapsed: false},
    // },
  ],

  fields: [
    defineField({
      group: 'content',
      name: 'internalTitle',
      type: 'string',
      title: 'Internal Title',

      validation: (Rule) =>
        Rule.required()
          .min(1)
          .max(100)
          .error('Internal title is required and must be under 100 characters'),
    }),

    defineField({
      group: 'content',
      name: 'introText_raw',
      type: 'introText',
      title: 'Intro Text',

      description: 'Add intro content to appear above the collection',
    }),
    defineField({
      group: 'content',
      name: 'items_raw',
      type: 'array',
      of: [
        // Inline card object for collection-specific content
        {type: 'card'},
        // Reference existing content for reusable items
        {
          type: 'reference',
          title: 'Existing Content',
          to: [{type: 'card'}, {type: 'person'}, {type: 'blog'}, {type: 'page'}, {type: 'link'}],
        },
        {type: 'image'},
      ],
      title: 'Collection Items',

      description: 'Add collection-specific cards or reference existing content',
      validation: (Rule) =>
        Rule.min(1).warning('Consider adding at least one item to the collection'),
    }),
    defineField({
      group: 'content',
      name: 'actions',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Actions',

      description:
        'Choose a "Link" item to define the CTA. In the Link item you can define different CTA types such as linked text or a button.',
      validation: (Rule) =>
        Rule.max(2).warning('More than 2 actions may overwhelm users. Consider keeping it simple.'),
    }),
    // defineField({
    //   name: 'images',
    //   type: 'array',
    //   of: [{type: 'file'}, {type: 'image'}],
    //   title: 'Additional Images / Documents',

    //   description:
    //     '💡 These appear after the main items. For mixed ordering, add images directly to the items above.',
    //   validation: (Rule) => Rule.max(20).warning('Consider limiting images for performance'),
    // }),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',

      description: 'The layout style determines how items are arranged in the collection',
      initialValue: 'Three Per Row',
      fieldset: 'styling',
      group: 'styling',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            ['One Per Row', 'Two Per Row', 'Three Per Row', 'Four Per Row', 'Five Per Row'],
            value,
          ),
        ),
      options: {
        list: [
          {value: 'One Per Row', title: '1️⃣ One Per Row'},
          {value: 'Two Per Row', title: '2️⃣ Two Per Row'},
          {value: 'Three Per Row', title: '3️⃣ Three Per Row'},
          {value: 'Four Per Row', title: '4️⃣ Four Per Row'},
          {value: 'Five Per Row', title: '5️⃣ Five Per Row'},
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'itemsVariant',
      type: 'string',
      title: 'Items Style',
      fieldset: 'styling',
      group: 'styling',
      description: 'Determines the appearance of each individual item in the collection',
      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            [
              'Default',
              'Icon Left',
              'Icon Center',
              'Icon Padding Left',
              'Icon Padding Center',
              'Logo',
              'Media',
              'Quote',
              'Icon Stats',
              'Icon Listing',
            ],
            value,
          ),
        ),
      options: {
        list: [
          {value: 'Default', title: 'Default Card'},
          {value: 'Icon Left', title: '🎯 Icon Left'},
          {value: 'Icon Center', title: '🎯 Icon Center'},
          {value: 'Icon Padding Left', title: '🎯 Icon Padding Left'},
          {value: 'Icon Padding Center', title: '🎯 Icon Padding Center'},
          {value: 'Logo', title: '🏢 Logo'},
          {value: 'Media', title: '🎬 Media'},
          {value: 'Quote', title: '💬 Testimonial'},
          {value: 'Icon Stats', title: '📊 Icon Stats'},
          {value: 'Icon Listing', title: '📋 Icon Listing'},
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      group: 'styling',
      name: 'itemsAspectRatio',
      type: 'string',
      title: 'Items Aspect Ratio',
      fieldset: 'styling',

      description: 'This will guide a minimum height for the items in the collection',
      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Default', 'Horizontal', 'Vertical', 'Square'], value),
        ),
      options: {list: ['Default', 'Horizontal', 'Vertical', 'Square'], layout: 'dropdown'},
    }),

    // Carousel Settings
    defineField({
      group: 'styling',
      name: 'carouselBreakpoints',
      type: 'array',
      fieldset: 'styling',
      of: [
        {
          type: 'string',
          validation: (Rule) =>
            Rule.custom((value) => validateIn(['Mobile', 'Tablet', 'Desktop'], value)),
          options: {list: ['Mobile', 'Tablet', 'Desktop']},
        },
      ],
      title: 'Show as Carousel at These Sizes',
      // group: 'carousel',
      description: 'Should this show as a carousel? If so, at which sizes?',
      fieldset: 'styling',
      options: {
        list: [
          {value: 'Mobile', title: '📱 Mobile'},
          {value: 'Tablet', title: '📱 Tablet'},
          {value: 'Desktop', title: '🖥️ Desktop'},
        ],
        layout: 'grid',
      },
      validation: (Rule) => Rule.unique().warning('Each breakpoint should only be selected once'),
    }),
    defineField({
      name: 'carouselAutoPlay',
      type: 'boolean',
      title: 'Carousel Auto Play?',
      group: 'carousel',
      fieldset: 'styling',
      hidden: ({document}) => {
        const breakpoints = document?.carouselBreakpoints
        return !Array.isArray(breakpoints) || breakpoints.length === 0
      },
      description: 'If this is a carousel, should it auto play on load?',
      initialValue: false,
    }),
    defineField({
      name: 'showFullItemsInCarousel',
      type: 'boolean',
      title: 'Show Full Items in Carousel?',
      group: 'carousel',
      fieldset: 'styling',
      hidden: ({document}) => {
        const breakpoints = document?.carouselBreakpoints
        return !Array.isArray(breakpoints) || breakpoints.length === 0
      },
      description: 'If set to "Yes" then the carousel will not show half of the next item',
    }),

    // Styling & Background
    defineField({
      name: 'backgroundImage',
      type: 'image',
      title: 'Background Image',
      fieldset: 'styling',
      group: 'styling',
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      fieldset: 'styling',
      group: 'styling',
      initialValue: 'Transparent',
      validation: (Rule) =>
        Rule.required().custom((value) => validateIn(['Transparent', 'Black', 'White'], value)),
      options: {list: ['Transparent', 'Black', 'White'], layout: 'dropdown'},
    }),

    defineField({
      group: 'content',
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {
    select: {
      title: 'internalTitle',
      variant: 'variant',
      itemCount: 'items',
      introTitle: 'introText.title',
      isCarousel: 'carouselBreakpoints',
      itemsVariant: 'itemsVariant',
    },
    prepare(selection) {
      const {title, variant, itemCount, introTitle, isCarousel, itemsVariant} = selection
      const itemCountText = Array.isArray(itemCount) ? `${itemCount.length} items` : 'No items'
      const carouselIndicator = Array.isArray(isCarousel) && isCarousel.length ? '🎠 ' : ''

      return {
        title: title || 'Untitled Collection',
        subtitle: `${carouselIndicator}${variant} • ${itemCountText} - ${itemsVariant}`,
        description: introTitle,
      }
    },
  },
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const contentful_textType = defineType({
  type: 'document',
  name: 'contentful_text',
  title: 'Element - Text',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,
      description: 'The Variant determines the style or the format the Text item. ',

      initialValue: 'default',
      validation: (Rule) => Rule.custom((value) => validateIn(['default', 'Intro Text'], value)),
      options: {list: ['default', 'Intro Text'], layout: 'dropdown'},
    }),
    withAIGeneration(
      defineField({
        name: 'overline',
        type: 'string',
        title: 'Overline',
        hidden: false,
        description: '[Optional] This field will be displayed above the Title.',
      }),
    ),
    withAIGeneration(defineField({name: 'title', type: 'string', title: 'Title', hidden: false})),
    withAIGeneration(
      defineField({
        name: 'subtitle',
        type: 'string',
        title: 'Subtitle',
        hidden: false,
        description: '[Optional] This field will be displayed below the Title.',
      }),
    ),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'section'},
                {type: 'card'},
                {type: 'link'},
                {type: 'collection'},
                {type: 'contentful_text'},
                {type: 'page'},
                {type: 'hero'},
                {type: 'navigationItem'},
                {type: 'site'},
                {type: 'header'},
                {type: 'moduleIntegration'},
                {type: 'media'},
                {type: 'person'},
                {type: 'categoryBlog'},
                {type: 'template'},
                {type: 'settings'},
                {type: 'contentful_block'},
                {type: 'footer'},
                {type: 'collectionDynamic'},
                {type: 'elementForm'},
                {type: 'elementVideo'},
                {type: 'collectionExpandableItem'},
                {type: 'collectionExpandable'},
                {type: 'blog'},
                {type: 'siteRedirect'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
    }),
    defineField({
      name: 'align',
      type: 'string',
      title: 'Text Alignment',
      hidden: false,
      description: 'Choose alignment of the text (e.g. left, right, center).',

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Default', 'Left', 'Center', 'Right', 'Justified'], value),
        ),
      options: {list: ['Default', 'Left', 'Center', 'Right', 'Justified'], layout: 'dropdown'},
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Transparent', 'Black', 'White', 'Navy'], value)),
      options: {list: ['Transparent', 'Black', 'White', 'Navy'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})
export const introTextType = defineType({
  type: 'object',
  name: 'introText',
  title: 'Intro Text',
  description: 'Add intro content to appear above the main content of this module.',
  fieldsets: [{name: 'styling', title: 'Styling'}],
  // Simplified - no nested fieldsets within the object
  options: {
    collapsible: true,
    collapsed: false, // Start expanded for easier access
  },

  fields: [
    defineField({
      name: 'overline',
      type: 'string',
      title: 'Overline',
      description: 'Small text that appears above the title (optional)',
      placeholder: 'e.g., "Featured" or "Latest News"',
      validation: (Rule) => Rule.max(50).warning('Keep overlines short for better readability'),
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      description: 'Main heading for this intro section',
      placeholder: 'Enter a compelling title...',
      validation: (Rule) => Rule.max(100).warning('Titles over 100 characters may be truncated'),
    }),
    defineField({
      name: 'body',
      type: 'array',
      title: 'Body Content',
      description: 'Rich text content for the intro section (optional)',
      of: [
        {
          type: 'block',
          styles: [{title: 'Normal', value: 'normal'}],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'Link',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'New window'},
                        {value: '_parent', title: 'Same window'},
                      ],
                    },
                  }),
                ],
              },
            ],
          },
        },
      ],
    }),
    // Simplified styling options - only the most commonly used
    defineField({
      name: 'align',
      type: 'string',
      fieldset: 'styling',
      title: 'Text Alignment',
      description: 'Choose alignment of the text',
      initialValue: 'Default',
      options: {
        list: [
          {title: 'Default', value: 'Default'},
          {title: 'Left', value: 'Left'},
          {title: 'Center', value: 'Center'},
          {title: 'Right', value: 'Right'},
        ],
        layout: 'radio', // Radio buttons for simpler UI
      },
    }),
  ],

  // Simplified preview
  preview: {
    select: {
      title: 'title',
      subtitle: 'overline',
    },
    prepare({title, subtitle}) {
      return {
        title: title || subtitle || 'Intro Text',
        subtitle: subtitle && title ? subtitle : title ? 'Has title' : 'Empty',
      }
    },
  },
})

export const pageType = defineType({
  type: 'document',
  name: 'page',
  title: 'Page - General',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'parentPage',
      type: 'reference',
      title: 'Parent Page',
      hidden: false,
      description:
        'This parent page will be used to build the path of the final URL for this page. Choose the page that resides directly above this page in the site hierarchy. If this is a "first-level" page, choose the Homepage. ',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description:
        'Enter the path of the url starting from root (ex: /health-101 or health-101/my-article)',
      validation: (Rule) =>
        (Rule.required() as any).regex(/^([^\/][a-zA-Z0-9_\-\/]*[^\/])|(\/)$/, {invert: false}),
      options: {source: 'title'},
    }),
    withAIGeneration(defineField({name: 'title', type: 'string', title: 'Title', hidden: false})),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      description: 'Choose the Hero item that will appear at the top of the page.',
      to: [{type: 'hero'}],
    }),
    defineField({
      name: 'contents',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'collection'},
            {type: 'section'},
            {type: 'contentful_text'},
            {type: 'contentful_block'},
            {type: 'collectionDynamic'},
            {type: 'collectionExpandable'},
            {type: 'media'},
            {type: 'moduleIntegration'},
            {type: 'elementVideo'},
            {type: 'elementForm'},
          ],
        },
      ],
      title: 'Contents',
      hidden: false,
      description:
        'Select the modules that will appear on the page. You can drag and drop them to control the sort order.',
      validation: (Rule) => Rule.required(),
    }),
    withAIGeneration(
      defineField({
        name: 'promoSummary',
        type: 'text',
        title: 'Promo Summary',
        hidden: false,
        description:
          '[Optional] When promoting this page, this summary may be shown dynamically rendered cards, listing pages, etc.)',
      }),
    ),
    defineField({
      name: 'promoImage',
      type: 'image',
      title: 'Promo Image',
      hidden: false,
      description:
        '[Optional] When promoting this page, this image may be shown dynamically rendered cards, listing pages, etc.)',
    }),
    defineField({
      name: 'disableBackToTop',
      type: 'boolean',
      title: 'Disable Back To Top',
      hidden: false,
      description:
        'The \'back to top of page\' widget appears on all pages by default. To disable this for this page, set this condition to "true".',
    }),
    defineField({
      name: 'headerOverride',
      type: 'reference',
      title: 'Header Override',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'footerOverride',
      type: 'reference',
      title: 'Footer Override',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      name: 'footerDisclaimerOverride',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Footer Disclaimer Override',
      hidden: false,
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categoryBlog'}]}],
      title: 'Categories',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
    defineField({
      name: 'seo',
      type: 'seo',
      title: 'SEO',
      hidden: false,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const heroType = defineType({
  type: 'document',
  name: 'hero',
  title: 'Hero',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            [
              'Default',
              'Media on Left',
              'Media on Left Full Bleed',
              'Media on Right',
              'Media on Right Full Bleed',
              'Media Above',
              'Media Below',
              'Image Only',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'Default',
          'Media on Left',
          'Media on Left Full Bleed',
          'Media on Right',
          'Media on Right Full Bleed',
          'Media Above',
          'Media Below',
          'Image Only',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'overline',
      type: 'string',
      title: 'Overline',
      hidden: false,
      description: '[Optional] This field will be displayed above the Title.',
    }),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description: 'Optional. This field will be displayed above the Title.',
    }),
    withAIGeneration(
      defineField({
        name: 'subtitle',
        type: 'string',
        title: 'Subtitle',
        hidden: false,
        description: '[Optional] This field will be displayed below the Title.',
      }),
    ),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
            ],
          },
        },
      ],
      title: 'Body',
      hidden: false,
      description: 'This is the main content area of the Hero. ',
    }),
    defineField({
      name: 'actions',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Actions',
      hidden: false,
      description:
        'Choose a "Link" item to define the CTA. In the Link item you can define different CTA types such as linked text or a button.',
      validation: (Rule) => Rule.max(3),
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      description: 'Select a background color. Default is None if no option is selected.',
      validation: (Rule) =>
        Rule.custom((value) =>
          validateIn(
            [
              'None',
              'Black',
              'White',
              'Primary',
              'Secondary',
              'Transparent Light',
              'Transparent Dark',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'None',
          'Black',
          'White',
          'Primary',
          'Secondary',
          'Transparent Light',
          'Transparent Dark',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'background',
      type: 'reference',
      title: 'Background Image',
      hidden: false,
      description:
        'Choose a Media item for the background image. With the Media item you can choose different images for Desktop, Tablet, and Mobile.',
      to: [{type: 'media'}],
    }),
    defineField({
      name: 'sideImageItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'media'}]}],
      title: 'Side Image Item(s)',
      hidden: false,
      description:
        'Choose a Media item for the side image. With the Media item you can choose different images for Desktop, Tablet, and Mobile.',
      validation: (Rule) => Rule.max(1),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const navigationItemType = defineType({
  type: 'document',
  name: 'navigationItem',
  title: 'Link - Navigation',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Link Style',
      hidden: false,

      initialValue: 'link',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            [
              'Link',
              'Link - Bolded',
              'Group',
              'Label',
              'Locale List',
              'Button - Outlined',
              'Button - Contained',
              'Featured',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'Link',
          'Link - Bolded',
          'Group',
          'Label',
          'Locale List',
          'Button - Outlined',
          'Button - Contained',
          'Featured',
        ],
        layout: 'radio',
      },
    }),
    defineField({
      name: 'text',
      type: 'string',
      title: 'Link Text',
      hidden: false,
      description:
        'This text will appear within the link or button. For links that utilize only an icon (and no link text), this text will be used for accessibility purposes..',
    }),
    defineField({
      name: 'linkedContent',
      type: 'reference',
      title: 'Linked Content',
      hidden: false,
      description:
        'If the page or the link exists in Contentful, use this field to select the slug or URL of that item.',
      to: [{type: 'page'}, {type: 'person'}, {type: 'blog'}],
    }),
    defineField({
      name: 'manualUrl',
      type: 'string',
      title: 'Manual URL',
      hidden: false,
      description:
        'If the page or URL does not exist in Contentful, use this field to manually configure an absolute URL. NOTE: if this field is used, the Linked Content field will be ignored.',
    }),
    defineField({
      name: 'summary',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Summary',
      hidden: false,
      description:
        'Will show below the link.   If the variant is "featured" then this will take up the entire column.',
    }),
    defineField({name: 'navMedia', type: 'file', title: 'Media', hidden: false}),
    defineField({name: 'altText', type: 'text', title: 'Alt Text', hidden: false}),
    defineField({
      name: 'subNavigation',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}, {type: 'navigationItem'}]}],
      title: 'Sub Navigation',
      hidden: false,
      description:
        'To create navigation menus with hierarchies, you can select child "Link - Navigation" items here.',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const siteType = defineType({
  type: 'document',
  name: 'site',
  title: 'Site - Settings',
  description: '',
  fields: [
    defineField({name: 'internalTitle', type: 'string', title: 'Internal title', hidden: false}),
    defineField({
      name: 'siteKey',
      type: 'string',
      title: 'Site Key',
      hidden: false,
      description:
        'This key is used to identify which site to apply the configuration options defined in this item. ',
      validation: (Rule) =>
        Rule.required().custom((value) => validateIn(['STARTER_ANYTHING'], value)),
      options: {list: ['STARTER_ANYTHING'], layout: 'dropdown'},
    }),
    defineField({
      name: 'header',
      type: 'reference',
      title: 'Header',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'footer',
      type: 'reference',
      title: 'Footer',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      name: 'rewrites',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'siteRedirect'}]}],
      title: 'Rewrites',
      hidden: false,
    }),
    defineField({
      name: 'redirects',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
      ],
      title: 'Redirects',
      hidden: false,
    }),
    defineField({
      name: 'theme',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
      ],
      title: 'Theme',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const headerType = defineType({
  type: 'document',
  name: 'header',
  title: 'Site - Header',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,
      description: 'Choose the variant that will be applied to the format of the Header.  ',

      initialValue: 'default',
      validation: (Rule) => Rule.custom((value) => validateIn(['default', 'simplified'], value)),
      options: {list: ['default', 'simplified'], layout: 'dropdown'},
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'logoUrl',
      type: 'reference',
      title: 'Logo Url',
      hidden: false,
      to: [{type: 'page'}, {type: 'link'}],
    }),
    defineField({
      name: 'navigationItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationItem'}]}],
      title: 'Navigation Items',
      hidden: false,
    }),
    defineField({
      name: 'ctaItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'CTA Items',
      hidden: false,
      description: 'Choose one more Link items to add button(s) or linked text items',
    }),
    defineField({name: 'supernavIcon', type: 'image', title: 'Supernav Icon', hidden: false}),
    defineField({
      name: 'supernavText',
      type: 'array',
      of: [
        {
          type: 'block',
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [{type: 'reference', title: 'Reference', to: [{type: 'link'}]}],
        },
        {type: 'image'},
        {type: 'file'},
      ],
      title: 'Supernav Text',
      hidden: false,
      description:
        'Optional. The Supernav is a banner that appears above the main navigation. Add the text and optional "Link" for the banner here.',
      validation: (Rule) => Rule.max(250),
    }),
    defineField({
      name: 'supernavMobileText',
      type: 'string',
      title: 'Supernav Mobile Text',
      hidden: false,
    }),
    defineField({
      name: 'supernavLink',
      type: 'reference',
      title: 'Supernav Link',
      hidden: false,
      to: [{type: 'page'}, {type: 'link'}],
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,

      initialValue: 'Inherit',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Inherit', 'Black', 'White', 'Transparent Light', 'Transparent Dark'], value),
        ),
      options: {
        list: ['Inherit', 'Black', 'White', 'Transparent Light', 'Transparent Dark'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'searchLandingPage',
      type: 'reference',
      title: 'Search Landing Page',
      hidden: false,
      to: [{type: 'page'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const moduleIntegrationType = defineType({
  type: 'document',
  name: 'moduleIntegration',
  title: 'Module Integration',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Variant',
      hidden: false,
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['iFrame', 'AnswerAI Chat (Inline)', 'AnswerAI Chat (Page Bubble)'], value),
        ),
      options: {
        list: ['iFrame', 'AnswerAI Chat (Inline)', 'AnswerAI Chat (Page Bubble)'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      description:
        '[Optional] Choose a Text item to add a title, subtitle, body, and/or overline to this module.',
      to: [{type: 'contentful_text'}],
    }),
    defineField({
      name: 'theme',
      type: 'reference',
      title: 'Theme',
      hidden: true,
      to: [
        {type: 'section'},
        {type: 'card'},
        {type: 'link'},
        {type: 'collection'},
        {type: 'contentful_text'},
        {type: 'page'},
        {type: 'hero'},
        {type: 'navigationItem'},
        {type: 'site'},
        {type: 'header'},
        {type: 'moduleIntegration'},
        {type: 'media'},
        {type: 'person'},
        {type: 'categoryBlog'},
        {type: 'template'},
        {type: 'settings'},
        {type: 'contentful_block'},
        {type: 'footer'},
        {type: 'collectionDynamic'},
        {type: 'elementForm'},
        {type: 'elementVideo'},
        {type: 'collectionExpandableItem'},
        {type: 'collectionExpandable'},
        {type: 'blog'},
        {type: 'siteRedirect'},
      ],
    }),
    defineField({name: 'iFrameUrl', type: 'string', title: 'iFrame URL', hidden: false}),
    defineField({
      name: 'iFrameHeight',
      type: 'string',
      title: 'iFrame Height',
      hidden: false,
      description: 'Enter in a valid CSS value.',
    }),
    defineField({
      name: 'iFrameWidth',
      type: 'string',
      title: 'iFrame Width',
      hidden: false,
      description: 'Enter in a valid CSS value.',
    }),
    defineField({name: 'backgroundImage', type: 'image', title: 'Background Image', hidden: false}),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Transparent', 'Black', 'White', 'Navy'], value)),
      options: {list: ['Transparent', 'Black', 'White', 'Navy'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const mediaType = defineType({
  type: 'document',
  name: 'media',
  title: 'Element - Media',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Asset Type',
      hidden: false,
      description: 'Please select Image or Video from the dropdown.',
      validation: (Rule) =>
        Rule.required().custom((value) => validateIn(['Image', 'Video'], value)),
      options: {list: ['Image', 'Video'], layout: 'dropdown'},
    }),
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'asset',
      type: 'image',
      title: 'Main Asset',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({name: 'tablet', type: 'image', title: 'Tablet Asset', hidden: false}),
    defineField({name: 'mobile', type: 'image', title: 'Mobile Asset', hidden: false}),
    defineField({
      name: 'assetUrl',
      type: 'string',
      title: 'External Video URL',
      hidden: false,
      description: 'This is only used for video',
    }),
    defineField({
      name: 'placeholder',
      type: 'image',
      title: 'Placeholder Image',
      hidden: false,
      description:
        'Use this item to overwrite the default video thumbnail that is associated to the asset URL above.',
    }),
    defineField({
      name: 'autoplay',
      type: 'boolean',
      title: 'Autoplay?',
      hidden: false,

      initialValue: false,
    }),
    defineField({name: 'altText', type: 'text', title: 'Alt Text', hidden: false}),
    defineField({
      name: 'link',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Link',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const personType = defineType({
  type: 'document',
  name: 'person',
  title: 'Page - Person',
  description: '',
  fields: [
    defineField({name: 'name', type: 'string', title: 'Name', hidden: false}),
    defineField({
      name: 'parentPage',
      type: 'reference',
      title: 'Parent Page',
      hidden: false,
      description:
        'This parent page will be used to build the path of the final URL for this page. Choose the page that resides directly above this page in the site hierarchy. If this is a "first-level" page, choose the Homepage. ',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        (Rule.required() as any).regex(/^([^\/][a-zA-Z0-9_\-\/]*[^\/])|(\/)$/, {invert: false}),
    }),
    defineField({
      name: 'jobTitle',
      type: 'string',
      title: 'Job Title',
      hidden: false,
      description: 'Enter the job title or company name of the person.',
    }),
    defineField({
      name: 'education',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Education',
      hidden: false,
      options: {layout: 'tags'},
    }),
    defineField({
      name: 'previousExperiences',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Previous Experiences',
      hidden: false,
      options: {layout: 'tags'},
    }),
    defineField({name: 'mainImage', type: 'image', title: 'Main Image', hidden: false}),
    defineField({name: 'rolloverImage', type: 'image', title: 'Rollover Image', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'section'},
                {type: 'card'},
                {type: 'link'},
                {type: 'collection'},
                {type: 'contentful_text'},
                {type: 'page'},
                {type: 'hero'},
                {type: 'navigationItem'},
                {type: 'site'},
                {type: 'header'},
                {type: 'moduleIntegration'},
                {type: 'media'},
                {type: 'person'},
                {type: 'categoryBlog'},
                {type: 'template'},
                {type: 'settings'},
                {type: 'contentful_block'},
                {type: 'footer'},
                {type: 'collectionDynamic'},
                {type: 'elementForm'},
                {type: 'elementVideo'},
                {type: 'collectionExpandableItem'},
                {type: 'collectionExpandable'},
                {type: 'blog'},
                {type: 'siteRedirect'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Bio Details',
      hidden: false,
    }),
    defineField({
      name: 'socialLinks',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Social Links',
      hidden: false,
    }),
    defineField({
      name: 'email',
      type: 'string',
      title: 'Email',
      hidden: false,
      validation: (Rule) => Rule.regex(/^\w[\w.-]*@([\w-]+\.)+[\w-]+$/, {invert: false}),
    }),
    withAIGeneration(
      defineField({
        name: 'promoSummary',
        type: 'text',
        title: 'Promo Summary',
        hidden: false,
        description:
          '[Optional] When promoting this page, this summary may be shown dynamically rendered cards, listing pages, etc.)',
      }),
    ),
    defineField({
      name: 'promoImage',
      type: 'image',
      title: 'Promo Image',
      hidden: false,
      description:
        '[Optional] When promoting this page, this image may be shown dynamically rendered cards, listing pages, etc.)',
    }),
    defineField({
      name: 'headerOverride',
      type: 'reference',
      title: 'Header Override',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'footerOverride',
      type: 'reference',
      title: 'Footer Override',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'name'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const categoryBlogType = defineType({
  type: 'document',
  name: 'categoryBlog',
  title: 'Category',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      description:
        'The slug will be used for URL paths or for #anchor tags, depending on the configuration of your site.',
      options: {source: 'title'},
    }),
    defineField({
      name: 'hero',
      type: 'reference',
      title: 'Hero',
      hidden: false,
      description: 'Choose the Hero item that will appear at the top of the page.',
      to: [{type: 'hero'}],
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 1', value: 'h1'},
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'section'},
                {type: 'card'},
                {type: 'link'},
                {type: 'collection'},
                {type: 'contentful_text'},
                {type: 'page'},
                {type: 'hero'},
                {type: 'navigationItem'},
                {type: 'site'},
                {type: 'header'},
                {type: 'moduleIntegration'},
                {type: 'media'},
                {type: 'person'},
                {type: 'categoryBlog'},
                {type: 'template'},
                {type: 'settings'},
                {type: 'contentful_block'},
                {type: 'footer'},
                {type: 'collectionDynamic'},
                {type: 'elementForm'},
                {type: 'elementVideo'},
                {type: 'collectionExpandableItem'},
                {type: 'collectionExpandable'},
                {type: 'blog'},
                {type: 'siteRedirect'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
    }),
    withAIGeneration(
      defineField({
        name: 'promoSummary',
        type: 'text',
        title: 'Promo Summary',
        hidden: false,
        description:
          '[Optional] When promoting this page, this summary may be shown dynamically rendered cards, listing pages, etc.)',
      }),
    ),
    defineField({
      name: 'promoImage',
      type: 'image',
      title: 'Promo Image',
      hidden: false,
      description:
        '[Optional] When promoting this page, this image may be shown dynamically rendered cards, listing pages, etc.)',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const templateType = defineType({
  type: 'document',
  name: 'template',
  title: 'Site - Template',
  description: '',
  fields: [
    defineField({name: 'templateName', type: 'string', title: 'Template Name', hidden: false}),
    defineField({name: 'image', type: 'file', title: 'Image', hidden: false}),
    defineField({
      name: 'content',
      type: 'reference',
      title: 'Content',
      hidden: false,
      to: [{type: 'collection'}, {type: 'section'}],
    }),
    defineField({name: 'category', type: 'string', title: 'Category', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'templateName'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const settingsType = defineType({
  type: 'document',
  name: 'settings',
  title: 'Site - Last Rev Settings',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'settingsType',
      type: 'string',
      title: 'Settings Type',
      hidden: false,
      description: 'Choose the type of Settings this represents',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Live Editor Settings', 'RTE Settings', 'Template', 'FRD'], value),
        ),
      options: {
        list: ['Live Editor Settings', 'RTE Settings', 'Template', 'FRD'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'image',
      type: 'file',
      title: 'Template Image',
      hidden: false,
      description: 'Used for Templates',
    }),
    defineField({
      name: 'content',
      type: 'reference',
      title: 'Template Content',
      hidden: false,
      description: 'Currently Used for Templates',
      to: [
        {type: 'section'},
        {type: 'card'},
        {type: 'link'},
        {type: 'collection'},
        {type: 'contentful_text'},
        {type: 'page'},
        {type: 'hero'},
        {type: 'navigationItem'},
        {type: 'site'},
        {type: 'header'},
        {type: 'moduleIntegration'},
        {type: 'media'},
        {type: 'person'},
        {type: 'categoryBlog'},
        {type: 'template'},
        {type: 'settings'},
        {type: 'contentful_block'},
        {type: 'footer'},
        {type: 'collectionDynamic'},
        {type: 'elementForm'},
        {type: 'elementVideo'},
        {type: 'collectionExpandableItem'},
        {type: 'collectionExpandable'},
        {type: 'blog'},
        {type: 'siteRedirect'},
      ],
    }),
    defineField({
      name: 'category',
      type: 'string',
      title: 'Template Category',
      hidden: false,

      initialValue: 'Used for template categorization',
    }),
    defineField({
      name: 'frdContents',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
      ],
      title: 'FRD Contents',
      hidden: false,
      description: 'This is used to generate the FRD Page that will be shown at /frd',
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const contentful_blockType = defineType({
  type: 'document',
  name: 'contentful_block',
  title: 'Block',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Variant',
      hidden: false,
      description: 'Configures the placement of elements within the Block.',

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.custom((value) =>
          validateIn(
            [
              'Default',
              'Content on Right',
              'Content on Right Full Bleed',
              'Content on Left',
              'Content on Left Full Bleed',
              'Content Above',
              'Content Below',
              'Small Content on Left',
              'Small Content on Right',
              'No Content',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'Default',
          'Content on Right',
          'Content on Right Full Bleed',
          'Content on Left',
          'Content on Left Full Bleed',
          'Content Above',
          'Content Below',
          'Small Content on Left',
          'Small Content on Right',
          'No Content',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      description:
        '[Optional] Choose a Text item to add a title, subtitle, body, and/or overline that will appear ABOVE the module. Use the Overline, Title, and Body fields below for that text to appear within the module. ',
      to: [{type: 'contentful_text'}],
    }),
    defineField({name: 'overline', type: 'string', title: 'Overline', hidden: false}),
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'subtitle', type: 'string', title: 'Subtitle', hidden: false}),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      description: 'This is the main content for the Block.',
    }),
    defineField({
      name: 'actions',
      type: 'array',
      of: [
        {type: 'reference', to: [{type: 'link'}, {type: 'blog'}, {type: 'page'}, {type: 'person'}]},
      ],
      title: 'Action(s)',
      hidden: false,
      description:
        'Choose a "Link" item to define the CTA. In the Link item you can define different CTA types such as linked text or a button.',
      validation: (Rule) => Rule.max(2),
    }),
    defineField({
      name: 'asset',
      type: 'file',
      title: 'Quick Media Asset',
      hidden: false,
      description:
        'Choose the primary image for the Block. Note: this will not be shown if there are items in the Contents field.',
    }),
    defineField({
      name: 'supplementalContent',
      type: 'reference',
      title: 'Supplemental Content',
      hidden: false,
      to: [
        {type: 'link'},
        {type: 'media'},
        {type: 'moduleIntegration'},
        {type: 'contentful_text'},
        {type: 'elementForm'},
      ],
    }),
    defineField({name: 'backgroundImage', type: 'image', title: 'Background Image', hidden: false}),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Transparent', 'Black', 'White', 'Navy'], value)),
      options: {list: ['Transparent', 'Black', 'White', 'Navy'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const footerType = defineType({
  type: 'document',
  name: 'footer',
  title: 'Site - Footer',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'introContents',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'contentful_block'},
            {type: 'collection'},
            {type: 'collectionExpandable'},
            {type: 'elementForm'},
          ],
        },
      ],
      title: 'Intro Contents',
      hidden: false,
    }),
    defineField({name: 'logo', type: 'file', title: 'Logo', hidden: false}),
    defineField({
      name: 'logoUrl',
      type: 'reference',
      title: 'Logo Url',
      hidden: false,
      to: [{type: 'link'}, {type: 'page'}],
    }),
    defineField({
      name: 'navigationItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'navigationItem'}]}],
      title: 'Navigation Items',
      hidden: false,
    }),
    defineField({
      name: 'socialLinks',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Social Links',
      hidden: false,
    }),
    defineField({
      name: 'disclaimerText',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Disclaimer Text',
      hidden: false,
    }),
    defineField({
      name: 'copyrightDisclaimer',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Copyright Disclaimer',
      hidden: false,
    }),
    defineField({
      name: 'legalLinks',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}, {type: 'page'}]}],
      title: 'Legal Links',
      hidden: false,
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,

      initialValue: 'Inherit',
      validation: (Rule) =>
        Rule.required().custom((value) => validateIn(['Inherit', 'Black', 'White'], value)),
      options: {list: ['Inherit', 'Black', 'White'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const collectionDynamicType = defineType({
  type: 'document',
  name: 'collectionDynamic',
  title: 'Collection - Dynamic',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      description:
        '[Optional] Choose a Text item to add a title, subtitle, body, and/or overline to this module.',
      to: [{type: 'contentful_text'}],
    }),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,
      description:
        'The "variant" of the Collection often refers the appearance and/or functionality of the Collection as a whole.',

      initialValue: 'Three Per Row',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            ['One Per Row', 'Two Per Row', 'Three Per Row', 'Four Per Row', 'Five Per Row'],
            value,
          ),
        ),
      options: {
        list: ['One Per Row', 'Two Per Row', 'Three Per Row', 'Four Per Row', 'Five Per Row'],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'itemsVariant',
      type: 'string',
      title: 'Items Style',
      hidden: false,
      description:
        'Determines the appearance of each individual item in the collection and most often refers to the appearance of a Card item.',

      initialValue: 'Default',
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(
            [
              'Default',
              'Icon',
              'Logo',
              'Media',
              'Media Only Full',
              'Media Only Fit',
              'Pricing',
              'Person',
              'Quote',
              'Blog',
              'Link List',
              'Hover',
              'Icon - left',
              'News',
              'Search',
            ],
            value,
          ),
        ),
      options: {
        list: [
          'Default',
          'Icon',
          'Logo',
          'Media',
          'Media Only Full',
          'Media Only Fit',
          'Pricing',
          'Person',
          'Quote',
          'Blog',
          'Link List',
          'Hover',
          'Icon - left',
          'News',
          'Search',
        ],
        layout: 'dropdown',
      },
    }),
    defineField({
      name: 'itemsAspectRatio',
      type: 'string',
      title: 'Items Aspect Ratio',
      hidden: false,
      validation: (Rule) =>
        Rule.required().custom((value) =>
          validateIn(['Default', 'Horizontal', 'Vertical', 'Square'], value),
        ),
      options: {list: ['Default', 'Horizontal', 'Vertical', 'Square'], layout: 'dropdown'},
    }),
    defineField({
      name: 'items',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'card'}, {type: 'person'}]}],
      title: 'Manual Items',
      hidden: false,
      description:
        'Use this field to manually select the items that will appear in this Collection.',
    }),
    defineField({
      name: 'filtersPlacement',
      type: 'string',
      title: 'Filters Placement',
      hidden: false,
      validation: (Rule) => Rule.custom((value) => validateIn(['Top', 'Left'], value)),
      options: {list: ['Top', 'Left'], layout: 'dropdown'},
    }),
    defineField({
      name: 'pullFromContentType',
      type: 'string',
      title: 'Pull from Content Type',
      hidden: true,
      description:
        'Choose the content type that will appear in the cards.  If you need to use a mix of different content types, please use the manual "Items" reference field.',
      validation: (Rule) => Rule.custom((value) => validateIn(['Blog'], value)),
      options: {list: ['Blog'], layout: 'dropdown'},
    }),
    defineField({
      name: 'pullFromCategoryItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categoryBlog'}]}],
      title: 'Pull from Category Items',
      hidden: true,
      description:
        'Choose the category to automatically pull the most recent published items related to this category.',
    }),
    defineField({
      name: 'numberOfItemsToPull',
      type: 'string',
      title: 'Number of items to pull',
      hidden: true,
      description:
        'Add a numerical value for the number of items to automatically pull from a category. ',
    }),
    defineField({
      name: 'actions',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Actions',
      hidden: false,
      description:
        'Choose a "Link" item to define the CTA. In the Link item you can define different CTA types such as linked text or a button.',
      validation: (Rule) => Rule.max(2),
    }),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Transparent', 'Black', 'White', 'Navy'], value)),
      options: {list: ['Transparent', 'Black', 'White', 'Navy'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const elementFormType = defineType({
  type: 'document',
  name: 'elementForm',
  title: 'Element - Form',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'parentPage',
      type: 'reference',
      title: 'Parent Page',
      hidden: false,
      description:
        '[Optional] Use this to define the parent path for the form url (aka form slug and confirmation path). ',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'slug',
      type: 'string',
      title: 'Slug',
      hidden: false,
      description:
        '[Optional] This is used to define the path if you want to provide a URL that has only a form and no other elements. However, the primary purpose is to define the confirmation page parent path.',
      validation: (Rule) => Rule.regex(/^([^\/][a-zA-Z0-9_\-\/]*[^\/])|(\/)$/, {invert: false}),
    }),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      to: [{type: 'contentful_text'}],
    }),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Variant',
      hidden: false,

      initialValue: 'Default',
      validation: (Rule) => Rule.required().custom((value) => validateIn(['Default'], value)),
      options: {list: ['Default'], layout: 'dropdown'},
    }),
    defineField({
      name: 'hubspotPortalId',
      type: 'string',
      title: 'Hubspot Portal ID',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'hubspotFormId',
      type: 'string',
      title: 'Hubspot Form ID',
      hidden: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'confirmationPath',
      type: 'string',
      title: 'Successful Confirmation URL Path',
      hidden: false,
      description:
        '[Optional] This is used to display a confirmation page that may contain an asset to download or to watch. This will be added to the end of the form url (slug) for the confirmation url (e.g. /[form-slug]/confirmation)',
    }),
    defineField({
      name: 'submissionContentItems',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
      ],
      title: 'Submission Content Items',
      hidden: false,
      description:
        '[Optional] The content here will render after a successful form submission. Use this field to provide a Text item success message, a Block with a CTA for downloading content or an Video embed to watch.',
    }),
    defineField({
      name: 'headerOverride',
      type: 'reference',
      title: 'Header Override',
      hidden: false,
      to: [{type: 'header'}],
    }),
    defineField({
      name: 'footerOverride',
      type: 'reference',
      title: 'Footer Override',
      hidden: false,
      to: [{type: 'footer'}],
    }),
    defineField({
      name: 'footerDisclaimerOverride',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Footer Disclaimer Override',
      hidden: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const elementVideoType = defineType({
  type: 'document',
  name: 'elementVideo',
  title: 'Element - Video',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({name: 'altText', type: 'text', title: 'Alt Text', hidden: false}),
    defineField({
      name: 'placeholder',
      type: 'file',
      title: 'Placeholder Image',
      hidden: false,
      description:
        'Use this item to overwrite the default video thumbnail that is associated to the asset URL above.',
    }),
    defineField({
      name: 'assetURL',
      type: 'string',
      title: 'Asset URL',
      hidden: false,
      description: 'Enter the full url for the video here.',
    }),
    defineField({name: 'asset', type: 'file', title: 'Main Asset', hidden: false}),
    defineField({name: 'tablet', type: 'file', title: 'Tablet Asset', hidden: false}),
    defineField({name: 'mobile', type: 'file', title: 'Mobile Asset', hidden: false}),
    defineField({
      name: 'autoplay',
      type: 'boolean',
      title: 'Autoplay?',
      hidden: false,

      initialValue: false,
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const collectionExpandableItemType = defineType({
  type: 'document',
  name: 'collectionExpandableItem',
  title: 'Collection - Expandable - Item',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'title',
      type: 'string',
      title: 'Title',
      hidden: false,
      description: 'This will be used for the unexpanded text.',
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
        },
      ],
      title: 'Body',
      hidden: false,
      description: 'This will be used for the expanded text.',
    }),
    defineField({
      name: 'content',
      type: 'reference',
      title: 'Referenced Content',
      hidden: false,
      description: 'If you use the Contents field, the Title and Body field will not be rendered. ',
      to: [{type: 'contentful_block'}, {type: 'collection'}],
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const collectionExpandableType = defineType({
  type: 'document',
  name: 'collectionExpandable',
  title: 'Collection - Expandable',
  description: '',
  fields: [
    withAIGeneration(
      defineField({name: 'internalTitle', type: 'string', title: 'Internal Title', hidden: false}),
    ),
    defineField({
      name: 'introText',
      type: 'reference',
      title: 'Intro Text',
      hidden: false,
      description:
        '[Optional] Choose a Text item to add a title, subtitle, body, and/or overline to this module.',
      to: [{type: 'contentful_text'}],
    }),
    defineField({
      name: 'variant',
      type: 'string',
      title: 'Layout Style',
      hidden: false,
      description:
        'The "variant" of the Collection often refers the appearance and/or functionality of the Collection as a whole.',

      initialValue: 'Tabs',
      validation: (Rule) =>
        Rule.required().custom((value) => validateIn(['Tabs', 'Accordion'], value)),
      options: {list: ['Tabs', 'Accordion'], layout: 'dropdown'},
    }),
    defineField({
      name: 'items',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'collectionExpandableItem'}]}],
      title: 'Expanding Items',
      hidden: false,
      description:
        'Use this field to manually select the items that will appear in this Expanding Collection.',
    }),
    defineField({
      name: 'actions',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}]}],
      title: 'Actions',
      hidden: false,
      description:
        'Choose a "Link" item to define the CTA. In the Link item you can define different CTA types such as linked text or a button.',
      validation: (Rule) => Rule.max(2),
    }),
    defineField({name: 'backgroundImage', type: 'image', title: 'Background Image', hidden: false}),
    defineField({
      name: 'backgroundColor',
      type: 'string',
      title: 'Background Color',
      hidden: false,
      validation: (Rule) =>
        Rule.custom((value) => validateIn(['Transparent', 'Black', 'White'], value)),
      options: {list: ['Transparent', 'Black', 'White'], layout: 'dropdown'},
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'internalTitle'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Page - Blog',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'parentPage',
      type: 'reference',
      title: 'Parent Page',
      hidden: false,
      description:
        'This parent page will be used to build the path of the final URL for this page. Choose the page that resides directly above this page in the site hierarchy. If this is a "first-level" page, choose the Homepage. ',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        (Rule.required() as any).regex(/^([^\/][a-zA-Z0-9_\-\/]*[^\/])|(\/)$/, {invert: false}),
      options: {source: 'title'},
    }),
    defineField({
      name: 'pubDate',
      type: 'date',
      title: 'Publish Date',
      hidden: false,
      description: 'Choose the date that defines the publish date for the blog.',
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      description: 'Choose the Person that is the author of the Blog.',
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'featuredMedia',
      type: 'image',
      title: 'Featured Media',
      hidden: false,
      description:
        'This image will be used as the featured image for the blog.   If the List Image field is not filled out, then this asset will be used.',
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'section'},
                {type: 'card'},
                {type: 'link'},
                {type: 'collection'},
                {type: 'contentful_text'},
                {type: 'page'},
                {type: 'hero'},
                {type: 'navigationItem'},
                {type: 'site'},
                {type: 'header'},
                {type: 'moduleIntegration'},
                {type: 'media'},
                {type: 'person'},
                {type: 'categoryBlog'},
                {type: 'template'},
                {type: 'settings'},
                {type: 'contentful_block'},
                {type: 'footer'},
                {type: 'collectionDynamic'},
                {type: 'elementForm'},
                {type: 'elementVideo'},
                {type: 'collectionExpandableItem'},
                {type: 'collectionExpandable'},
                {type: 'blog'},
                {type: 'siteRedirect'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      description: 'This is the primary content of the Blog post. ',
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categoryBlog'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Choose the Category for this blog.',
      validation: (Rule) => Rule.required().max(1),
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description:
        'These are free-form tags that are used for filtering  blogs. These appear as tags on the blog detail page.',
      options: {layout: 'tags'},
    }),
    withAIGeneration(
      defineField({
        name: 'promoSummary',
        type: 'text',
        title: 'Promo Summary',
        hidden: false,
        description:
          '[Optional] When promoting this page, this summary may be shown dynamically rendered cards, listing pages, etc.)',
      }),
    ),
    defineField({
      name: 'promoImage',
      type: 'image',
      title: 'Promo Image',
      hidden: false,
      description:
        '[Optional] When promoting this page, this image may be shown dynamically rendered cards, listing pages, etc.)',
    }),
    defineField({
      name: 'relatedItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}, {type: 'blog'}]}],
      title: 'Related Items',
      hidden: false,
      validation: (Rule) => Rule.max(5),
    }),
    defineField({
      name: 'disableBackToTop',
      type: 'boolean',
      title: 'Disable Back To Top',
      hidden: false,
      description:
        'The \'back to top of page\' widget appears on all pages by default. To disable this for this page, set this condition to "true".',

      initialValue: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const siteRedirectType = defineType({
  type: 'document',
  name: 'siteRedirect',
  title: 'Site - Redirect',
  description: 'Manage site wide redirects',
  fields: [
    defineField({name: 'source', type: 'string', title: 'Source', hidden: false}),
    defineField({name: 'destination', type: 'string', title: 'Destination', hidden: false}),
    defineField({name: 'permanent', type: 'boolean', title: 'Permanent', hidden: false}),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'source'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})

export const breakType = defineType({
  name: 'break',
  title: 'Break',
  type: 'object',
  fields: [
    defineField({
      name: 'style',
      type: 'string',
      options: {
        list: [
          {title: 'Line break', value: 'lineBreak'},
          {title: 'Read more', value: 'readMore'},
        ],
      },
    }),
  ],
})

export const tagType = defineType({
  name: 'tag',
  title: 'Tag',
  type: 'document',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      validation: (Rule) => Rule.required(),
    }),
  ],
})

export const testType = defineType({
  name: 'test',
  title: 'Test',
  type: 'document',
  fields: [
    defineField({
      name: 'name',
      type: 'string',
      title: 'Name',
      validation: (Rule) => Rule.required(),
    }),
  ],
})

export const types = [
  sectionType,
  cardType,
  linkType,
  collectionType,
  contentful_textType,
  introTextType,
  pageType,
  heroType,
  navigationItemType,
  siteType,
  headerType,
  moduleIntegrationType,
  mediaType,
  personType,
  categoryBlogType,
  templateType,
  settingsType,
  contentful_blockType,
  footerType,
  collectionDynamicType,
  elementFormType,
  elementVideoType,
  collectionExpandableItemType,
  collectionExpandableType,
  blogType,
  siteRedirectType,
  breakType,
  tagType,
  testType,
  seoType,
] satisfies SchemaTypeDefinition[]
