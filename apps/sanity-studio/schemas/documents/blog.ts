import { defineType, defineField } from 'sanity'
import { withAIGeneration } from '../utils/ai-generation'

export const blogType = defineType({
  type: 'document',
  name: 'blog',
  title: 'Page - Blog',
  description: '',
  fields: [
    defineField({name: 'title', type: 'string', title: 'Title', hidden: false}),
    defineField({
      name: 'parentPage',
      type: 'reference',
      title: 'Parent Page',
      hidden: false,
      description:
        'This parent page will be used to build the path of the final URL for this page. Choose the page that resides directly above this page in the site hierarchy. If this is a "first-level" page, choose the Homepage. ',
      to: [{type: 'page'}],
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      hidden: false,
      validation: (Rule) =>
        (Rule.required() as any).regex(/^([^\/][a-zA-Z0-9_\-\/]*[^\/])|(\/)$/, {invert: false}),
      options: {source: 'title'},
    }),
    defineField({
      name: 'pubDate',
      type: 'date',
      title: 'Publish Date',
      hidden: false,
      description: 'Choose the date that defines the publish date for the blog.',
    }),
    defineField({
      name: 'author',
      type: 'reference',
      title: 'Author',
      hidden: false,
      description: 'Choose the Person that is the author of the Blog.',
      to: [{type: 'person'}],
    }),
    defineField({
      name: 'featuredMedia',
      type: 'image',
      title: 'Featured Media',
      hidden: false,
      description:
        'This image will be used as the featured image for the blog.   If the List Image field is not filled out, then this asset will be used.',
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: 'Heading 2', value: 'h2'},
            {title: 'Heading 3', value: 'h3'},
            {title: 'Heading 4', value: 'h4'},
            {title: 'Heading 5', value: 'h5'},
            {title: 'Heading 6', value: 'h6'},
            {title: 'Quote', value: 'blockquote'},
          ],
          lists: [
            {title: 'Bullet', value: 'bullet'},
            {title: 'Numbered', value: 'number'},
          ],
          marks: {
            decorators: [
              {title: 'Strong', value: 'strong'},
              {title: 'Emphasis', value: 'em'},
              {title: 'Code', value: 'code'},
              {title: 'Underline', value: 'underline'},
            ],
            annotations: [
              {
                type: 'object',
                name: 'link',
                title: 'url',
                fields: [
                  defineField({
                    type: 'string',
                    name: 'href',
                    title: 'URL',
                    validation: (Rule) => Rule.required(),
                  }),
                  defineField({
                    type: 'string',
                    name: 'target',
                    title: 'Target',
                    options: {
                      list: [
                        {value: '_blank', title: 'Blank'},
                        {value: '_parent', title: 'Parent'},
                      ],
                    },
                  }),
                ],
              },
              {
                type: 'reference',
                name: 'reference',
                title: 'Reference',
                to: [
                  {type: 'section'},
                  {type: 'card'},
                  {type: 'link'},
                  {type: 'collection'},
                  {type: 'contentful_text'},
                  {type: 'page'},
                  {type: 'hero'},
                  {type: 'navigationItem'},
                  {type: 'site'},
                  {type: 'header'},
                  {type: 'moduleIntegration'},
                  {type: 'media'},
                  {type: 'person'},
                  {type: 'categoryBlog'},
                  {type: 'template'},
                  {type: 'settings'},
                  {type: 'contentful_block'},
                  {type: 'footer'},
                  {type: 'collectionDynamic'},
                  {type: 'elementForm'},
                  {type: 'elementVideo'},
                  {type: 'collectionExpandableItem'},
                  {type: 'collectionExpandable'},
                  {type: 'blog'},
                  {type: 'siteRedirect'},
                ],
              },
              {type: 'image'},
              {type: 'file'},
            ],
          },
          of: [
            {
              type: 'reference',
              title: 'Reference',
              to: [
                {type: 'section'},
                {type: 'card'},
                {type: 'link'},
                {type: 'collection'},
                {type: 'contentful_text'},
                {type: 'page'},
                {type: 'hero'},
                {type: 'navigationItem'},
                {type: 'site'},
                {type: 'header'},
                {type: 'moduleIntegration'},
                {type: 'media'},
                {type: 'person'},
                {type: 'categoryBlog'},
                {type: 'template'},
                {type: 'settings'},
                {type: 'contentful_block'},
                {type: 'footer'},
                {type: 'collectionDynamic'},
                {type: 'elementForm'},
                {type: 'elementVideo'},
                {type: 'collectionExpandableItem'},
                {type: 'collectionExpandable'},
                {type: 'blog'},
                {type: 'siteRedirect'},
              ],
            },
          ],
        },
        {
          type: 'reference',
          title: 'Reference',
          to: [
            {type: 'section'},
            {type: 'card'},
            {type: 'link'},
            {type: 'collection'},
            {type: 'contentful_text'},
            {type: 'page'},
            {type: 'hero'},
            {type: 'navigationItem'},
            {type: 'site'},
            {type: 'header'},
            {type: 'moduleIntegration'},
            {type: 'media'},
            {type: 'person'},
            {type: 'categoryBlog'},
            {type: 'template'},
            {type: 'settings'},
            {type: 'contentful_block'},
            {type: 'footer'},
            {type: 'collectionDynamic'},
            {type: 'elementForm'},
            {type: 'elementVideo'},
            {type: 'collectionExpandableItem'},
            {type: 'collectionExpandable'},
            {type: 'blog'},
            {type: 'siteRedirect'},
          ],
        },
        {type: 'image'},
        {type: 'file'},
        {type: 'break'},
      ],
      title: 'Body',
      hidden: false,
      description: 'This is the primary content of the Blog post. ',
    }),
    defineField({
      name: 'categories',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'categoryBlog'}]}],
      title: 'Categories',
      hidden: false,
      description: 'Choose the Category for this blog.',
      validation: (Rule) => Rule.required().max(1),
    }),
    defineField({
      name: 'tags',
      type: 'array',
      of: [{type: 'string'}],
      title: 'Tags',
      hidden: false,
      description:
        'These are free-form tags that are used for filtering  blogs. These appear as tags on the blog detail page.',
      options: {layout: 'tags'},
    }),
    withAIGeneration(
      defineField({
        name: 'promoSummary',
        type: 'text',
        title: 'Promo Summary',
        hidden: false,
        description:
          '[Optional] When promoting this page, this summary may be shown dynamically rendered cards, listing pages, etc.)',
      }),
    ),
    defineField({
      name: 'promoImage',
      type: 'image',
      title: 'Promo Image',
      hidden: false,
      description:
        '[Optional] When promoting this page, this image may be shown dynamically rendered cards, listing pages, etc.)',
    }),
    defineField({
      name: 'relatedItems',
      type: 'array',
      of: [{type: 'reference', to: [{type: 'link'}, {type: 'blog'}]}],
      title: 'Related Items',
      hidden: false,
      validation: (Rule) => Rule.max(5),
    }),
    defineField({
      name: 'disableBackToTop',
      type: 'boolean',
      title: 'Disable Back To Top',
      hidden: false,
      description:
        'The \'back to top of page\' widget appears on all pages by default. To disable this for this page, set this condition to "true".',

      initialValue: false,
    }),
    defineField({
      type: 'boolean',
      description:
        'If this document was archived on Contentful at the time of export, the document will be in a read-only state.',
      name: 'contentfulArchived',
      readOnly: true,
    }),
  ],
  preview: {select: {title: 'title'}},
  readOnly: ({document}) => (document == null ? void 0 : document.contentfulArchived) === !0,
})
